
Smart_Home_Room_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00001740  000017d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000b4  008000b4  00001828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000414d  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014eb  00000000  00000000  00005d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000188b  00000000  00000000  00007234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  00008ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d87  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d41  00000000  00000000  0000af73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      28:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_10>
      2c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_11>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	81 02       	muls	r24, r17
      56:	86 02       	muls	r24, r22
      58:	8b 02       	muls	r24, r27
      5a:	90 02       	muls	r25, r16
      5c:	95 02       	muls	r25, r21
      5e:	9a 02       	muls	r25, r26
      60:	9f 02       	muls	r25, r31
      62:	a4 02       	muls	r26, r20
      64:	cf 02       	muls	r28, r31
      66:	d4 02       	muls	r29, r20
      68:	d9 02       	muls	r29, r25
      6a:	de 02       	muls	r29, r30
      6c:	e3 02       	muls	r30, r19
      6e:	e8 02       	muls	r30, r24
      70:	ed 02       	muls	r30, r29
      72:	f2 02       	muls	r31, r18
      74:	1d 03       	fmul	r17, r21
      76:	26 03       	mulsu	r18, r22
      78:	30 03       	mulsu	r19, r16
      7a:	3b 03       	fmul	r19, r19
      7c:	46 03       	mulsu	r20, r22
      7e:	50 03       	mulsu	r21, r16
      80:	5b 03       	fmul	r21, r19
      82:	66 03       	mulsu	r22, r22
      84:	97 03       	fmuls	r17, r23
      86:	9a 03       	fmulsu	r17, r18
      88:	9e 03       	fmulsu	r17, r22
      8a:	a3 03       	fmuls	r18, r19
      8c:	a8 03       	fmulsu	r18, r16
      8e:	ac 03       	fmulsu	r18, r20
      90:	b1 03       	fmuls	r19, r17
      92:	b6 03       	fmuls	r19, r22
      94:	10 06       	cpc	r1, r16
      96:	15 06       	cpc	r1, r21
      98:	18 06       	cpc	r1, r24
      9a:	1b 06       	cpc	r1, r27
      9c:	1e 06       	cpc	r1, r30
      9e:	21 06       	cpc	r2, r17
      a0:	24 06       	cpc	r2, r20
      a2:	3f 07       	cpc	r19, r31
      a4:	52 07       	cpc	r21, r18
      a6:	65 07       	cpc	r22, r21
      a8:	78 07       	cpc	r23, r24
      aa:	8b 07       	cpc	r24, r27
      ac:	9e 07       	cpc	r25, r30
      ae:	b1 07       	cpc	r27, r17
      b0:	c4 07       	cpc	r28, r20
      b2:	d7 07       	cpc	r29, r23
      b4:	ea 07       	cpc	r30, r26
      b6:	fd 07       	cpc	r31, r29
      b8:	10 08       	sbc	r1, r0
      ba:	23 08       	sbc	r2, r3
      bc:	36 08       	sbc	r3, r6
      be:	49 08       	sbc	r4, r9

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf e5       	ldi	r28, 0x5F	; 95
      c6:	d8 e0       	ldi	r29, 0x08	; 8
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	10 e0       	ldi	r17, 0x00	; 0
      ce:	a0 e6       	ldi	r26, 0x60	; 96
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	e0 e4       	ldi	r30, 0x40	; 64
      d4:	f7 e1       	ldi	r31, 0x17	; 23
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
      d8:	05 90       	lpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a4 3b       	cpi	r26, 0xB4	; 180
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	a4 eb       	ldi	r26, 0xB4	; 180
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a5 3c       	cpi	r26, 0xC5	; 197
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
      f2:	0e 94 ad 04 	call	0x95a	; 0x95a <main>
      f6:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <_exit>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
	//ADC Enable:
	ADC_1->ADCSRA_Reg.Bits.ADEN_Bit = STD_High;
      fe:	86 b1       	in	r24, 0x06	; 6
     100:	80 68       	ori	r24, 0x80	; 128
     102:	86 b9       	out	0x06, r24	; 6
	//ADC Frequency Prescaler -> 64:
	ADC_1->ADCSRA_Reg.Bits.ADPS_Bits = ADC_Prescaler_Select_Bits;
     104:	86 b1       	in	r24, 0x06	; 6
     106:	87 60       	ori	r24, 0x07	; 7
     108:	86 b9       	out	0x06, r24	; 6
	//ADC Reference Voltage -> internal (2.56V):
	ADC_1->ADMUX_Reg.Bits.REFS_Bits = ADC_Voltage_Refrence_Bits;
     10a:	87 b1       	in	r24, 0x07	; 7
     10c:	80 6c       	ori	r24, 0xC0	; 192
     10e:	87 b9       	out	0x07, r24	; 7
     110:	08 95       	ret

00000112 <ADC_Channel_Read>:
Uint16 ADC_Channel_Read(ADC_Channel_Type Channel)
{
	Uint16 Data = 0;

	//ADC Analog Channel Choice:
	ADC_1->ADMUX_Reg.Bits.MUX_Bits  =  Channel;
     112:	8f 71       	andi	r24, 0x1F	; 31
     114:	97 b1       	in	r25, 0x07	; 7
     116:	90 7e       	andi	r25, 0xE0	; 224
     118:	89 2b       	or	r24, r25
     11a:	87 b9       	out	0x07, r24	; 7
	//Clear ADC interrupt flag: 
	ADC_1->ADCSRA_Reg.Bits.ADIF_Bit = STD_Low;
     11c:	86 b1       	in	r24, 0x06	; 6
     11e:	8f 7e       	andi	r24, 0xEF	; 239
     120:	86 b9       	out	0x06, r24	; 6
	//ADC Start Conversion:
	ADC_1->ADCSRA_Reg.Bits.ADSC_Bit=STD_High;
     122:	86 b1       	in	r24, 0x06	; 6
     124:	80 64       	ori	r24, 0x40	; 64
     126:	86 b9       	out	0x06, r24	; 6
	//Wait for ADC interrupt flag:
	while (ADC_1->ADCSRA_Reg.Bits.ADIF_Bit==STD_Low);
     128:	34 9b       	sbis	0x06, 4	; 6
     12a:	fe cf       	rjmp	.-4      	; 0x128 <ADC_Channel_Read+0x16>
	//ADC Read Data
	Data |= (ADC_1->ADCL_Reg | (ADC_1->ADCH_Reg << STD_Reg_Bits_Number) );
     12c:	24 b1       	in	r18, 0x04	; 4
     12e:	85 b1       	in	r24, 0x05	; 5
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	98 2f       	mov	r25, r24
     134:	88 27       	eor	r24, r24
	return Data;
     136:	82 2b       	or	r24, r18
     138:	08 95       	ret

0000013a <DC_Motor_Init>:
{

	DIO_Channel_Write(DC_Motor_IN2,STD_High);
	DIO_Channel_Write(DC_Motor_IN1,STD_Low);
	Timer2_NonInv_FPWM_Duty(Speed);
}
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	00 d0       	rcall	.+0      	; 0x140 <DC_Motor_Init+0x6>
     140:	1f 92       	push	r1
     142:	cd b7       	in	r28, 0x3d	; 61
     144:	de b7       	in	r29, 0x3e	; 62
     146:	61 e0       	ldi	r22, 0x01	; 1
     148:	8a e1       	ldi	r24, 0x1A	; 26
     14a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	8b e1       	ldi	r24, 0x1B	; 27
     152:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     156:	61 e0       	ldi	r22, 0x01	; 1
     158:	8f e1       	ldi	r24, 0x1F	; 31
     15a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	92 e0       	ldi	r25, 0x02	; 2
     164:	9a 83       	std	Y+2, r25	; 0x02
     166:	8b 83       	std	Y+3, r24	; 0x03
     168:	ce 01       	movw	r24, r28
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer2_Init>
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <DC_Motor_CW>:
     17c:	cf 93       	push	r28
     17e:	c8 2f       	mov	r28, r24
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	8b e1       	ldi	r24, 0x1B	; 27
     184:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	8a e1       	ldi	r24, 0x1A	; 26
     18c:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     190:	6c 2f       	mov	r22, r28
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     19c:	0e 94 08 09 	call	0x1210	; 0x1210 <Timer2_NonInv_FPWM_Duty>
     1a0:	cf 91       	pop	r28
     1a2:	08 95       	ret

000001a4 <DC_Motor_Stop>:

void DC_Motor_Stop(void)
{
	DIO_Channel_Write(DC_Motor_IN2,STD_High);
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	8b e1       	ldi	r24, 0x1B	; 27
     1a8:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
	DIO_Channel_Write(DC_Motor_IN1,STD_High);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	8a e1       	ldi	r24, 0x1A	; 26
     1b0:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     1b4:	08 95       	ret

000001b6 <Delay_Init>:
 */ 

#include "Delay.h"

void Delay_Init(void)
{
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <Delay_Init+0x6>
     1bc:	1f 92       	push	r1
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
	Timer0_Init_Type Timer0_Init_Delay = {Timer0_WG_Normal_Mode,Timer0_COM_Normal_Mode,Timer0_CS_64Presc};
     1c2:	19 82       	std	Y+1, r1	; 0x01
     1c4:	1a 82       	std	Y+2, r1	; 0x02
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	8b 83       	std	Y+3, r24	; 0x03
	Timer0_Init(&Timer0_Init_Delay);	
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	0e 94 f5 06 	call	0xdea	; 0xdea <Timer0_Init>
	Enable_OVF_Interrupt();
     1d2:	89 b7       	in	r24, 0x39	; 57
     1d4:	81 60       	ori	r24, 0x01	; 1
     1d6:	89 bf       	out	0x39, r24	; 57
	Enable_OCR_Interrupt();
     1d8:	89 b7       	in	r24, 0x39	; 57
     1da:	82 60       	ori	r24, 0x02	; 2
     1dc:	89 bf       	out	0x39, r24	; 57
	Enable_General_Interrupt();
     1de:	78 94       	sei
}
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <Delay_us>:

void Delay_us(Uint32 Delay_Time_us)
{
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
	Uint16  Prescaler   =0;
	Uint32  F_OS        =0;
	Float32 Delay_Calcs =0;
	Timer0_OVFs         =0;
     1f4:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Timer0_OVFs>
     1f8:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Timer0_OVFs+0x1>
     1fc:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <Timer0_OVFs+0x2>
     200:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <Timer0_OVFs+0x3>
	Timer0_OVF_Count    =0;
     204:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <Timer0_OVF_Count>
     208:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <Timer0_OVF_Count+0x1>
     20c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Timer0_OVF_Count+0x2>
     210:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <Timer0_OVF_Count+0x3>
	Timer0_OCR_Flag     =0;
     214:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <Timer0_OCR_Flag>
	
	Delay_Time_us   = (Float32)Delay_Time_us;
     218:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     21c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     220:	6b 01       	movw	r12, r22
     222:	7c 01       	movw	r14, r24
	Prescaler       = (Float32)Timer0_CS_Select(Timer0_CS_64Presc);
     224:	83 e0       	ldi	r24, 0x03	; 3
     226:	0e 94 af 06 	call	0xd5e	; 0xd5e <Timer0_CS_Select>
     22a:	28 2f       	mov	r18, r24
     22c:	30 e0       	ldi	r19, 0x00	; 0
	F_OS            = (Float32)(F_CPU/1000000);
	Delay_Calcs     = (Float32)((Delay_Time_us*F_OS) / (256*Prescaler));
     22e:	d7 01       	movw	r26, r14
     230:	c6 01       	movw	r24, r12
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	aa 1f       	adc	r26, r26
     238:	bb 1f       	adc	r27, r27
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	aa 1f       	adc	r26, r26
     240:	bb 1f       	adc	r27, r27
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	66 0f       	add	r22, r22
     248:	77 1f       	adc	r23, r23
     24a:	88 1f       	adc	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	66 0f       	add	r22, r22
     250:	77 1f       	adc	r23, r23
     252:	88 1f       	adc	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	32 2f       	mov	r19, r18
     258:	22 27       	eor	r18, r18
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodsi4>
     262:	ca 01       	movw	r24, r20
     264:	b9 01       	movw	r22, r18
     266:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     26a:	6b 01       	movw	r12, r22
     26c:	7c 01       	movw	r14, r24
	Timer0_OVFs     = ( (Uint32)( Delay_Calcs) );
     26e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     272:	60 93 bd 00 	sts	0x00BD, r22	; 0x8000bd <Timer0_OVFs>
     276:	70 93 be 00 	sts	0x00BE, r23	; 0x8000be <Timer0_OVFs+0x1>
     27a:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Timer0_OVFs+0x2>
     27e:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <Timer0_OVFs+0x3>
	Timer0_OCR0_Reg = (Uint8)( (Delay_Calcs - Timer0_OVFs)*256 - 1 );
     282:	60 91 bd 00 	lds	r22, 0x00BD	; 0x8000bd <Timer0_OVFs>
     286:	70 91 be 00 	lds	r23, 0x00BE	; 0x8000be <Timer0_OVFs+0x1>
     28a:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Timer0_OVFs+0x2>
     28e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <Timer0_OVFs+0x3>
     292:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     296:	9b 01       	movw	r18, r22
     298:	ac 01       	movw	r20, r24
     29a:	c7 01       	movw	r24, r14
     29c:	b6 01       	movw	r22, r12
     29e:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	40 e8       	ldi	r20, 0x80	; 128
     2a8:	53 e4       	ldi	r21, 0x43	; 67
     2aa:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e8       	ldi	r20, 0x80	; 128
     2b4:	5f e3       	ldi	r21, 0x3F	; 63
     2b6:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
     2ba:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     2be:	6c bf       	out	0x3c, r22	; 60

	while(!(Timer0_OVF_Count == Timer0_OVFs));
     2c0:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <Timer0_OVF_Count>
     2c4:	50 91 b9 00 	lds	r21, 0x00B9	; 0x8000b9 <Timer0_OVF_Count+0x1>
     2c8:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <Timer0_OVF_Count+0x2>
     2cc:	70 91 bb 00 	lds	r23, 0x00BB	; 0x8000bb <Timer0_OVF_Count+0x3>
     2d0:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Timer0_OVFs>
     2d4:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <Timer0_OVFs+0x1>
     2d8:	a0 91 bf 00 	lds	r26, 0x00BF	; 0x8000bf <Timer0_OVFs+0x2>
     2dc:	b0 91 c0 00 	lds	r27, 0x00C0	; 0x8000c0 <Timer0_OVFs+0x3>
     2e0:	48 17       	cp	r20, r24
     2e2:	59 07       	cpc	r21, r25
     2e4:	6a 07       	cpc	r22, r26
     2e6:	7b 07       	cpc	r23, r27
     2e8:	59 f7       	brne	.-42     	; 0x2c0 <Delay_us+0xd4>
	while(Timer0_OCR_Flag == 0);
     2ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Timer0_OCR_Flag>
     2ee:	88 23       	and	r24, r24
     2f0:	e1 f3       	breq	.-8      	; 0x2ea <Delay_us+0xfe>
}
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	df 90       	pop	r13
     2f8:	cf 90       	pop	r12
     2fa:	08 95       	ret

000002fc <Delay_ms>:

void Delay_ms(Uint32 Delay_Time_ms)
{
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24
	Uint16  Prescaler   =0;
	Uint32  F_OS        =0;
	Float32 Delay_Calcs =0;
	Timer0_OVFs         =0;
     30c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Timer0_OVFs>
     310:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Timer0_OVFs+0x1>
     314:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <Timer0_OVFs+0x2>
     318:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <Timer0_OVFs+0x3>
	Timer0_OVF_Count    =0;
     31c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <Timer0_OVF_Count>
     320:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <Timer0_OVF_Count+0x1>
     324:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Timer0_OVF_Count+0x2>
     328:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <Timer0_OVF_Count+0x3>
	Timer0_OCR_Flag     =0;
     32c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <Timer0_OCR_Flag>
	
	Prescaler       = (Float32)Timer0_CS_Select(Timer0_CS_64Presc);
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	0e 94 af 06 	call	0xd5e	; 0xd5e <Timer0_CS_Select>
     336:	c8 2f       	mov	r28, r24
     338:	d0 e0       	ldi	r29, 0x00	; 0
	Delay_Time_ms   = (Float32)Delay_Time_ms;
     33a:	c7 01       	movw	r24, r14
     33c:	b6 01       	movw	r22, r12
     33e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     342:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     346:	9b 01       	movw	r18, r22
     348:	ac 01       	movw	r20, r24
	F_OS            = (Float32)(F_CPU/1000);
	Delay_Calcs     = (Float32)((Delay_Time_ms*F_OS) / (256*Prescaler));
     34a:	a0 e8       	ldi	r26, 0x80	; 128
     34c:	be e3       	ldi	r27, 0x3E	; 62
     34e:	0e 94 4f 0b 	call	0x169e	; 0x169e <__muluhisi3>
     352:	3c 2f       	mov	r19, r28
     354:	22 27       	eor	r18, r18
     356:	40 e0       	ldi	r20, 0x00	; 0
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodsi4>
     35e:	ca 01       	movw	r24, r20
     360:	b9 01       	movw	r22, r18
     362:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     366:	6b 01       	movw	r12, r22
     368:	7c 01       	movw	r14, r24
	Timer0_OVFs     = ((Uint32)(Delay_Calcs));
     36a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     36e:	60 93 bd 00 	sts	0x00BD, r22	; 0x8000bd <Timer0_OVFs>
     372:	70 93 be 00 	sts	0x00BE, r23	; 0x8000be <Timer0_OVFs+0x1>
     376:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <Timer0_OVFs+0x2>
     37a:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <Timer0_OVFs+0x3>
	Timer0_OCR0_Reg = (Uint8)( (Delay_Calcs - Timer0_OVFs)*256 - 1 );
     37e:	60 91 bd 00 	lds	r22, 0x00BD	; 0x8000bd <Timer0_OVFs>
     382:	70 91 be 00 	lds	r23, 0x00BE	; 0x8000be <Timer0_OVFs+0x1>
     386:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <Timer0_OVFs+0x2>
     38a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <Timer0_OVFs+0x3>
     38e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     392:	9b 01       	movw	r18, r22
     394:	ac 01       	movw	r20, r24
     396:	c7 01       	movw	r24, r14
     398:	b6 01       	movw	r22, r12
     39a:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e8       	ldi	r20, 0x80	; 128
     3a4:	53 e4       	ldi	r21, 0x43	; 67
     3a6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e8       	ldi	r20, 0x80	; 128
     3b0:	5f e3       	ldi	r21, 0x3F	; 63
     3b2:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
     3b6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
     3ba:	6c bf       	out	0x3c, r22	; 60
	
	while(!(Timer0_OVF_Count == Timer0_OVFs));
     3bc:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <Timer0_OVF_Count>
     3c0:	50 91 b9 00 	lds	r21, 0x00B9	; 0x8000b9 <Timer0_OVF_Count+0x1>
     3c4:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <Timer0_OVF_Count+0x2>
     3c8:	70 91 bb 00 	lds	r23, 0x00BB	; 0x8000bb <Timer0_OVF_Count+0x3>
     3cc:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Timer0_OVFs>
     3d0:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <Timer0_OVFs+0x1>
     3d4:	a0 91 bf 00 	lds	r26, 0x00BF	; 0x8000bf <Timer0_OVFs+0x2>
     3d8:	b0 91 c0 00 	lds	r27, 0x00C0	; 0x8000c0 <Timer0_OVFs+0x3>
     3dc:	48 17       	cp	r20, r24
     3de:	59 07       	cpc	r21, r25
     3e0:	6a 07       	cpc	r22, r26
     3e2:	7b 07       	cpc	r23, r27
     3e4:	59 f7       	brne	.-42     	; 0x3bc <Delay_ms+0xc0>
	while(Timer0_OCR_Flag == 0);
     3e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Timer0_OCR_Flag>
     3ea:	88 23       	and	r24, r24
     3ec:	e1 f3       	breq	.-8      	; 0x3e6 <Delay_ms+0xea>
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	08 95       	ret

000003fc <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
	Timer0_OVF_Count++;
     40e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Timer0_OVF_Count>
     412:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Timer0_OVF_Count+0x1>
     416:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <Timer0_OVF_Count+0x2>
     41a:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <Timer0_OVF_Count+0x3>
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	a1 1d       	adc	r26, r1
     422:	b1 1d       	adc	r27, r1
     424:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <Timer0_OVF_Count>
     428:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <Timer0_OVF_Count+0x1>
     42c:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <Timer0_OVF_Count+0x2>
     430:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <Timer0_OVF_Count+0x3>
}
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     446:	1f 92       	push	r1
     448:	0f 92       	push	r0
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	0f 92       	push	r0
     44e:	11 24       	eor	r1, r1
     450:	4f 93       	push	r20
     452:	5f 93       	push	r21
     454:	6f 93       	push	r22
     456:	7f 93       	push	r23
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
	if(Timer0_OVF_Count == Timer0_OVFs)
     460:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <Timer0_OVF_Count>
     464:	50 91 b9 00 	lds	r21, 0x00B9	; 0x8000b9 <Timer0_OVF_Count+0x1>
     468:	60 91 ba 00 	lds	r22, 0x00BA	; 0x8000ba <Timer0_OVF_Count+0x2>
     46c:	70 91 bb 00 	lds	r23, 0x00BB	; 0x8000bb <Timer0_OVF_Count+0x3>
     470:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Timer0_OVFs>
     474:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <Timer0_OVFs+0x1>
     478:	a0 91 bf 00 	lds	r26, 0x00BF	; 0x8000bf <Timer0_OVFs+0x2>
     47c:	b0 91 c0 00 	lds	r27, 0x00C0	; 0x8000c0 <Timer0_OVFs+0x3>
     480:	48 17       	cp	r20, r24
     482:	59 07       	cpc	r21, r25
     484:	6a 07       	cpc	r22, r26
     486:	7b 07       	cpc	r23, r27
     488:	59 f4       	brne	.+22     	; 0x4a0 <__vector_10+0x5a>
	{
		Timer0_OVF_Count=0;
     48a:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <Timer0_OVF_Count>
     48e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <Timer0_OVF_Count+0x1>
     492:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Timer0_OVF_Count+0x2>
     496:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <Timer0_OVF_Count+0x3>
		Timer0_OCR_Flag =1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <Timer0_OCR_Flag>
	}
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	7f 91       	pop	r23
     4aa:	6f 91       	pop	r22
     4ac:	5f 91       	pop	r21
     4ae:	4f 91       	pop	r20
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <DIO_Channel_Mode>:
*/

#include "DIO.h"

void  DIO_Channel_Mode(DIO_Channel_Type Channel , DIO_Direction_Type Direction)
{
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
     4be:	98 2f       	mov	r25, r24
     4c0:	96 95       	lsr	r25
     4c2:	96 95       	lsr	r25
     4c4:	96 95       	lsr	r25
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
     4c6:	e8 2f       	mov	r30, r24
     4c8:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00 ;
	
	switch(Port)
     4ca:	91 30       	cpi	r25, 0x01	; 1
     4cc:	41 f0       	breq	.+16     	; 0x4de <DIO_Channel_Mode+0x24>
     4ce:	80 f0       	brcs	.+32     	; 0x4f0 <DIO_Channel_Mode+0x36>
     4d0:	92 30       	cpi	r25, 0x02	; 2
     4d2:	41 f0       	breq	.+16     	; 0x4e4 <DIO_Channel_Mode+0x2a>
     4d4:	93 30       	cpi	r25, 0x03	; 3
     4d6:	49 f0       	breq	.+18     	; 0x4ea <DIO_Channel_Mode+0x30>

void  DIO_Channel_Mode(DIO_Channel_Type Channel , DIO_Direction_Type Direction)
{
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00 ;
     4d8:	c0 e0       	ldi	r28, 0x00	; 0
     4da:	d0 e0       	ldi	r29, 0x00	; 0
     4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <DIO_Channel_Mode+0x3a>
		case DIO_PortA :
		Reg = &(DIO->DDRA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->DDRB_Reg);
     4de:	c7 e3       	ldi	r28, 0x37	; 55
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     4e2:	08 c0       	rjmp	.+16     	; 0x4f4 <DIO_Channel_Mode+0x3a>
		
		case DIO_PortC :
		Reg = &(DIO->DDRC_Reg);
     4e4:	c4 e3       	ldi	r28, 0x34	; 52
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <DIO_Channel_Mode+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->DDRD_Reg);
     4ea:	c1 e3       	ldi	r28, 0x31	; 49
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_Channel_Mode+0x3a>
	volatile DIO_Reg_Type * Reg = 0x00 ;
	
	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->DDRA_Reg);
     4f0:	ca e3       	ldi	r28, 0x3A	; 58
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->DDRD_Reg);
		break;
	}
	
	switch(Bit)
     4f4:	8e 2f       	mov	r24, r30
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	fc 01       	movw	r30, r24
     4fa:	e6 5d       	subi	r30, 0xD6	; 214
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__tablejump2__>
	{
		case DIO_Bit_0 :
		Reg->Bits.Bit_0 = Direction;
     502:	88 81       	ld	r24, Y
     504:	60 fb       	bst	r22, 0
     506:	80 f9       	bld	r24, 0
     508:	88 83       	st	Y, r24
		break;
     50a:	22 c0       	rjmp	.+68     	; 0x550 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_1 :
		Reg->Bits.Bit_1 = Direction;
     50c:	88 81       	ld	r24, Y
     50e:	60 fb       	bst	r22, 0
     510:	81 f9       	bld	r24, 1
     512:	88 83       	st	Y, r24
		break;
     514:	1d c0       	rjmp	.+58     	; 0x550 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_2 :
		Reg->Bits.Bit_2 = Direction;
     516:	88 81       	ld	r24, Y
     518:	60 fb       	bst	r22, 0
     51a:	82 f9       	bld	r24, 2
     51c:	88 83       	st	Y, r24
		break;
     51e:	18 c0       	rjmp	.+48     	; 0x550 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_3 :
		Reg->Bits.Bit_3 = Direction;
     520:	88 81       	ld	r24, Y
     522:	60 fb       	bst	r22, 0
     524:	83 f9       	bld	r24, 3
     526:	88 83       	st	Y, r24
		break;
     528:	13 c0       	rjmp	.+38     	; 0x550 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_4 :
		Reg->Bits.Bit_4 = Direction;
     52a:	88 81       	ld	r24, Y
     52c:	60 fb       	bst	r22, 0
     52e:	84 f9       	bld	r24, 4
     530:	88 83       	st	Y, r24
		break;
     532:	0e c0       	rjmp	.+28     	; 0x550 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_5 :
		Reg->Bits.Bit_5 = Direction;
     534:	88 81       	ld	r24, Y
     536:	60 fb       	bst	r22, 0
     538:	85 f9       	bld	r24, 5
     53a:	88 83       	st	Y, r24
		break;
     53c:	09 c0       	rjmp	.+18     	; 0x550 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_6 :
		Reg->Bits.Bit_6 = Direction;
     53e:	88 81       	ld	r24, Y
     540:	60 fb       	bst	r22, 0
     542:	86 f9       	bld	r24, 6
     544:	88 83       	st	Y, r24
		break;
     546:	04 c0       	rjmp	.+8      	; 0x550 <DIO_Channel_Mode+0x96>
		
		case DIO_Bit_7 :
		Reg->Bits.Bit_7 = Direction;
     548:	88 81       	ld	r24, Y
     54a:	60 fb       	bst	r22, 0
     54c:	87 f9       	bld	r24, 7
     54e:	88 83       	st	Y, r24
		break;
	}
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <DIO_Channel_Write>:

void  DIO_Channel_Write(DIO_Channel_Type Channel , STD_Level_Type Level)
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
     55a:	98 2f       	mov	r25, r24
     55c:	96 95       	lsr	r25
     55e:	96 95       	lsr	r25
     560:	96 95       	lsr	r25
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
     562:	e8 2f       	mov	r30, r24
     564:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00 ;

	switch(Port)
     566:	91 30       	cpi	r25, 0x01	; 1
     568:	41 f0       	breq	.+16     	; 0x57a <DIO_Channel_Write+0x24>
     56a:	80 f0       	brcs	.+32     	; 0x58c <DIO_Channel_Write+0x36>
     56c:	92 30       	cpi	r25, 0x02	; 2
     56e:	41 f0       	breq	.+16     	; 0x580 <DIO_Channel_Write+0x2a>
     570:	93 30       	cpi	r25, 0x03	; 3
     572:	49 f0       	breq	.+18     	; 0x586 <DIO_Channel_Write+0x30>

void  DIO_Channel_Write(DIO_Channel_Type Channel , STD_Level_Type Level)
{
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00 ;
     574:	c0 e0       	ldi	r28, 0x00	; 0
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	0b c0       	rjmp	.+22     	; 0x590 <DIO_Channel_Write+0x3a>
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->PORTB_Reg);
     57a:	c8 e3       	ldi	r28, 0x38	; 56
     57c:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     57e:	08 c0       	rjmp	.+16     	; 0x590 <DIO_Channel_Write+0x3a>
		
		case DIO_PortC :
		Reg = &(DIO->PORTC_Reg);
     580:	c5 e3       	ldi	r28, 0x35	; 53
     582:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     584:	05 c0       	rjmp	.+10     	; 0x590 <DIO_Channel_Write+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
     586:	c2 e3       	ldi	r28, 0x32	; 50
     588:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     58a:	02 c0       	rjmp	.+4      	; 0x590 <DIO_Channel_Write+0x3a>
	volatile DIO_Reg_Type * Reg = 0x00 ;

	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
     58c:	cb e3       	ldi	r28, 0x3B	; 59
     58e:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
		break;
	}
	
	switch(Bit)
     590:	8e 2f       	mov	r24, r30
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	ee 5c       	subi	r30, 0xCE	; 206
     598:	ff 4f       	sbci	r31, 0xFF	; 255
     59a:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__tablejump2__>
	{
		case DIO_Bit_0 :
		Reg->Bits.Bit_0 = Level;
     59e:	88 81       	ld	r24, Y
     5a0:	60 fb       	bst	r22, 0
     5a2:	80 f9       	bld	r24, 0
     5a4:	88 83       	st	Y, r24
		break;
     5a6:	22 c0       	rjmp	.+68     	; 0x5ec <DIO_Channel_Write+0x96>
		
		case DIO_Bit_1 :
		Reg->Bits.Bit_1 = Level;
     5a8:	88 81       	ld	r24, Y
     5aa:	60 fb       	bst	r22, 0
     5ac:	81 f9       	bld	r24, 1
     5ae:	88 83       	st	Y, r24
		break;
     5b0:	1d c0       	rjmp	.+58     	; 0x5ec <DIO_Channel_Write+0x96>
		
		case DIO_Bit_2 :
		Reg->Bits.Bit_2 = Level;
     5b2:	88 81       	ld	r24, Y
     5b4:	60 fb       	bst	r22, 0
     5b6:	82 f9       	bld	r24, 2
     5b8:	88 83       	st	Y, r24
		break;
     5ba:	18 c0       	rjmp	.+48     	; 0x5ec <DIO_Channel_Write+0x96>
		
		case DIO_Bit_3 :
		Reg->Bits.Bit_3 = Level;
     5bc:	88 81       	ld	r24, Y
     5be:	60 fb       	bst	r22, 0
     5c0:	83 f9       	bld	r24, 3
     5c2:	88 83       	st	Y, r24
		break;
     5c4:	13 c0       	rjmp	.+38     	; 0x5ec <DIO_Channel_Write+0x96>
		
		case DIO_Bit_4 :
		Reg->Bits.Bit_4 = Level;
     5c6:	88 81       	ld	r24, Y
     5c8:	60 fb       	bst	r22, 0
     5ca:	84 f9       	bld	r24, 4
     5cc:	88 83       	st	Y, r24
		break;
     5ce:	0e c0       	rjmp	.+28     	; 0x5ec <DIO_Channel_Write+0x96>
		
		case DIO_Bit_5 :
		Reg->Bits.Bit_5 = Level;
     5d0:	88 81       	ld	r24, Y
     5d2:	60 fb       	bst	r22, 0
     5d4:	85 f9       	bld	r24, 5
     5d6:	88 83       	st	Y, r24
		break;
     5d8:	09 c0       	rjmp	.+18     	; 0x5ec <DIO_Channel_Write+0x96>
		
		case DIO_Bit_6 :
		Reg->Bits.Bit_6 = Level;
     5da:	88 81       	ld	r24, Y
     5dc:	60 fb       	bst	r22, 0
     5de:	86 f9       	bld	r24, 6
     5e0:	88 83       	st	Y, r24
		break;
     5e2:	04 c0       	rjmp	.+8      	; 0x5ec <DIO_Channel_Write+0x96>
		
		case DIO_Bit_7 :
		Reg->Bits.Bit_7 = Level;
     5e4:	88 81       	ld	r24, Y
     5e6:	60 fb       	bst	r22, 0
     5e8:	87 f9       	bld	r24, 7
     5ea:	88 83       	st	Y, r24
		break;
	}
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <DIO_Channel_Toggle>:

void  DIO_Channel_Toggle(DIO_Channel_Type Channel)
{
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
     5f6:	98 2f       	mov	r25, r24
     5f8:	96 95       	lsr	r25
     5fa:	96 95       	lsr	r25
     5fc:	96 95       	lsr	r25
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
     5fe:	e8 2f       	mov	r30, r24
     600:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00  ;
	
	switch(Port)
     602:	91 30       	cpi	r25, 0x01	; 1
     604:	41 f0       	breq	.+16     	; 0x616 <DIO_Channel_Toggle+0x24>
     606:	80 f0       	brcs	.+32     	; 0x628 <DIO_Channel_Toggle+0x36>
     608:	92 30       	cpi	r25, 0x02	; 2
     60a:	41 f0       	breq	.+16     	; 0x61c <DIO_Channel_Toggle+0x2a>
     60c:	93 30       	cpi	r25, 0x03	; 3
     60e:	49 f0       	breq	.+18     	; 0x622 <DIO_Channel_Toggle+0x30>

void  DIO_Channel_Toggle(DIO_Channel_Type Channel)
{
	DIO_Port_Type Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type  Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00  ;
     610:	c0 e0       	ldi	r28, 0x00	; 0
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	0b c0       	rjmp	.+22     	; 0x62c <DIO_Channel_Toggle+0x3a>
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->PORTB_Reg);
     616:	c8 e3       	ldi	r28, 0x38	; 56
     618:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     61a:	08 c0       	rjmp	.+16     	; 0x62c <DIO_Channel_Toggle+0x3a>
		
		case DIO_PortC :
		Reg =&(DIO->PORTC_Reg);
     61c:	c5 e3       	ldi	r28, 0x35	; 53
     61e:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     620:	05 c0       	rjmp	.+10     	; 0x62c <DIO_Channel_Toggle+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
     622:	c2 e3       	ldi	r28, 0x32	; 50
     624:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_Channel_Toggle+0x3a>
	volatile DIO_Reg_Type * Reg = 0x00  ;
	
	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->PORTA_Reg);
     628:	cb e3       	ldi	r28, 0x3B	; 59
     62a:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->PORTD_Reg);
		break;
	}
	
	switch(Bit)
     62c:	8e 2f       	mov	r24, r30
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	fc 01       	movw	r30, r24
     632:	e6 5c       	subi	r30, 0xC6	; 198
     634:	ff 4f       	sbci	r31, 0xFF	; 255
     636:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__tablejump2__>
	{
		case DIO_Bit_0 :
		Reg->Bits.Bit_0 = !(Reg->Bits.Bit_0) ;
     63a:	88 81       	ld	r24, Y
     63c:	81 70       	andi	r24, 0x01	; 1
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	89 27       	eor	r24, r25
     642:	98 81       	ld	r25, Y
     644:	80 fb       	bst	r24, 0
     646:	90 f9       	bld	r25, 0
     648:	98 83       	st	Y, r25
		break;
     64a:	4a c0       	rjmp	.+148    	; 0x6e0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_1 :
		Reg->Bits.Bit_1 = !(Reg->Bits.Bit_1);
     64c:	88 81       	ld	r24, Y
     64e:	86 95       	lsr	r24
     650:	81 70       	andi	r24, 0x01	; 1
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	89 27       	eor	r24, r25
     656:	98 81       	ld	r25, Y
     658:	80 fb       	bst	r24, 0
     65a:	91 f9       	bld	r25, 1
     65c:	98 83       	st	Y, r25
		break;
     65e:	40 c0       	rjmp	.+128    	; 0x6e0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_2 :
		Reg->Bits.Bit_2 = !(Reg->Bits.Bit_2);
     660:	88 81       	ld	r24, Y
     662:	82 fb       	bst	r24, 2
     664:	99 27       	eor	r25, r25
     666:	90 f9       	bld	r25, 0
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	89 27       	eor	r24, r25
     66c:	98 81       	ld	r25, Y
     66e:	80 fb       	bst	r24, 0
     670:	92 f9       	bld	r25, 2
     672:	98 83       	st	Y, r25
		break;
     674:	35 c0       	rjmp	.+106    	; 0x6e0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_3 :
		Reg->Bits.Bit_3 = !(Reg->Bits.Bit_3);
     676:	88 81       	ld	r24, Y
     678:	83 fb       	bst	r24, 3
     67a:	99 27       	eor	r25, r25
     67c:	90 f9       	bld	r25, 0
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	89 27       	eor	r24, r25
     682:	98 81       	ld	r25, Y
     684:	80 fb       	bst	r24, 0
     686:	93 f9       	bld	r25, 3
     688:	98 83       	st	Y, r25
		break;
     68a:	2a c0       	rjmp	.+84     	; 0x6e0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_4 :
		Reg->Bits.Bit_0 = !(Reg->Bits.Bit_4);
     68c:	88 81       	ld	r24, Y
     68e:	82 95       	swap	r24
     690:	81 70       	andi	r24, 0x01	; 1
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	89 27       	eor	r24, r25
     696:	98 81       	ld	r25, Y
     698:	80 fb       	bst	r24, 0
     69a:	90 f9       	bld	r25, 0
     69c:	98 83       	st	Y, r25
		break;
     69e:	20 c0       	rjmp	.+64     	; 0x6e0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_5 :
		Reg->Bits.Bit_5 = !(Reg->Bits.Bit_5);
     6a0:	88 81       	ld	r24, Y
     6a2:	85 fb       	bst	r24, 5
     6a4:	99 27       	eor	r25, r25
     6a6:	90 f9       	bld	r25, 0
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	89 27       	eor	r24, r25
     6ac:	98 81       	ld	r25, Y
     6ae:	80 fb       	bst	r24, 0
     6b0:	95 f9       	bld	r25, 5
     6b2:	98 83       	st	Y, r25
		break;
     6b4:	15 c0       	rjmp	.+42     	; 0x6e0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_6 :
		Reg->Bits.Bit_6 = !(Reg->Bits.Bit_6);
     6b6:	88 81       	ld	r24, Y
     6b8:	86 fb       	bst	r24, 6
     6ba:	99 27       	eor	r25, r25
     6bc:	90 f9       	bld	r25, 0
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	89 27       	eor	r24, r25
     6c2:	98 81       	ld	r25, Y
     6c4:	80 fb       	bst	r24, 0
     6c6:	96 f9       	bld	r25, 6
     6c8:	98 83       	st	Y, r25
		break;
     6ca:	0a c0       	rjmp	.+20     	; 0x6e0 <DIO_Channel_Toggle+0xee>
		
		case DIO_Bit_7 :
		Reg->Bits.Bit_7 = !(Reg->Bits.Bit_7);
     6cc:	88 81       	ld	r24, Y
     6ce:	87 fb       	bst	r24, 7
     6d0:	99 27       	eor	r25, r25
     6d2:	90 f9       	bld	r25, 0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	89 27       	eor	r24, r25
     6d8:	98 81       	ld	r25, Y
     6da:	80 fb       	bst	r24, 0
     6dc:	97 f9       	bld	r25, 7
     6de:	98 83       	st	Y, r25
		break;
	}
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <DIO_Channel_Read>:

STD_Level_Type DIO_Channel_Read(DIO_Channel_Type Channel)
{
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
	DIO_Port_Type  Port = Channel/STD_Reg_Bits_Number;
     6ea:	98 2f       	mov	r25, r24
     6ec:	96 95       	lsr	r25
     6ee:	96 95       	lsr	r25
     6f0:	96 95       	lsr	r25
	DIO_Bit_Type   Bit  = Channel%STD_Reg_Bits_Number;
     6f2:	e8 2f       	mov	r30, r24
     6f4:	e7 70       	andi	r30, 0x07	; 7
	volatile DIO_Reg_Type * Reg = 0x00  ;
	STD_Level_Type level = STD_Low;
	
	switch(Port)
     6f6:	91 30       	cpi	r25, 0x01	; 1
     6f8:	41 f0       	breq	.+16     	; 0x70a <DIO_Channel_Read+0x24>
     6fa:	80 f0       	brcs	.+32     	; 0x71c <DIO_Channel_Read+0x36>
     6fc:	92 30       	cpi	r25, 0x02	; 2
     6fe:	41 f0       	breq	.+16     	; 0x710 <DIO_Channel_Read+0x2a>
     700:	93 30       	cpi	r25, 0x03	; 3
     702:	49 f0       	breq	.+18     	; 0x716 <DIO_Channel_Read+0x30>

STD_Level_Type DIO_Channel_Read(DIO_Channel_Type Channel)
{
	DIO_Port_Type  Port = Channel/STD_Reg_Bits_Number;
	DIO_Bit_Type   Bit  = Channel%STD_Reg_Bits_Number;
	volatile DIO_Reg_Type * Reg = 0x00  ;
     704:	c0 e0       	ldi	r28, 0x00	; 0
     706:	d0 e0       	ldi	r29, 0x00	; 0
     708:	0b c0       	rjmp	.+22     	; 0x720 <DIO_Channel_Read+0x3a>
		case DIO_PortA :
		Reg = &(DIO->PINA_Reg);
		break;
		
		case DIO_PortB :
		Reg = &(DIO->PINB_Reg);
     70a:	c6 e3       	ldi	r28, 0x36	; 54
     70c:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     70e:	08 c0       	rjmp	.+16     	; 0x720 <DIO_Channel_Read+0x3a>
		
		case DIO_PortC :
		Reg = &(DIO->PINC_Reg);
     710:	c3 e3       	ldi	r28, 0x33	; 51
     712:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     714:	05 c0       	rjmp	.+10     	; 0x720 <DIO_Channel_Read+0x3a>
		
		case DIO_PortD :
		Reg = &(DIO->PIND_Reg);
     716:	c0 e3       	ldi	r28, 0x30	; 48
     718:	d0 e0       	ldi	r29, 0x00	; 0
		break;
     71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_Channel_Read+0x3a>
	STD_Level_Type level = STD_Low;
	
	switch(Port)
	{
		case DIO_PortA :
		Reg = &(DIO->PINA_Reg);
     71c:	c9 e3       	ldi	r28, 0x39	; 57
     71e:	d0 e0       	ldi	r29, 0x00	; 0
		case DIO_PortD :
		Reg = &(DIO->PIND_Reg);
		break;
	}
	
	switch(Bit)
     720:	8e 2f       	mov	r24, r30
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	fc 01       	movw	r30, r24
     726:	ee 5b       	subi	r30, 0xBE	; 190
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__tablejump2__>
	{
		case DIO_Bit_0 :
		level =Reg->Bits.Bit_0 ;
     72e:	88 81       	ld	r24, Y
     730:	81 70       	andi	r24, 0x01	; 1
		break;
     732:	20 c0       	rjmp	.+64     	; 0x774 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_1 :
		level = Reg->Bits.Bit_1 ;
     734:	88 81       	ld	r24, Y
     736:	86 95       	lsr	r24
     738:	81 70       	andi	r24, 0x01	; 1
		break;
     73a:	1c c0       	rjmp	.+56     	; 0x774 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_2 :
		level = Reg->Bits.Bit_2 ;
     73c:	88 81       	ld	r24, Y
     73e:	82 fb       	bst	r24, 2
     740:	88 27       	eor	r24, r24
     742:	80 f9       	bld	r24, 0
		break;
     744:	17 c0       	rjmp	.+46     	; 0x774 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_3 :
		level = Reg->Bits.Bit_3 ;
     746:	88 81       	ld	r24, Y
     748:	83 fb       	bst	r24, 3
     74a:	88 27       	eor	r24, r24
     74c:	80 f9       	bld	r24, 0
		break;
     74e:	12 c0       	rjmp	.+36     	; 0x774 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_4 :
		level = Reg->Bits.Bit_4 ;
     750:	88 81       	ld	r24, Y
     752:	82 95       	swap	r24
     754:	81 70       	andi	r24, 0x01	; 1
		break;
     756:	0e c0       	rjmp	.+28     	; 0x774 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_5 :
		level = Reg->Bits.Bit_5;
     758:	88 81       	ld	r24, Y
     75a:	85 fb       	bst	r24, 5
     75c:	88 27       	eor	r24, r24
     75e:	80 f9       	bld	r24, 0
		break;
     760:	09 c0       	rjmp	.+18     	; 0x774 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_6 :
		level = Reg->Bits.Bit_6 ;
     762:	88 81       	ld	r24, Y
     764:	86 fb       	bst	r24, 6
     766:	88 27       	eor	r24, r24
     768:	80 f9       	bld	r24, 0
		break;
     76a:	04 c0       	rjmp	.+8      	; 0x774 <DIO_Channel_Read+0x8e>
		
		case DIO_Bit_7 :
		level = Reg->Bits.Bit_7 ;
     76c:	88 81       	ld	r24, Y
     76e:	87 fb       	bst	r24, 7
     770:	88 27       	eor	r24, r24
     772:	80 f9       	bld	r24, 0
		break;
	}
	return level;
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <DIO_Port_Write>:

void  DIO_Port_Write(DIO_Port_Type Port, Uint8 Data)
{
	switch(Port)
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	41 f0       	breq	.+16     	; 0x78e <DIO_Port_Write+0x14>
     77e:	28 f0       	brcs	.+10     	; 0x78a <DIO_Port_Write+0x10>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	39 f0       	breq	.+14     	; 0x792 <DIO_Port_Write+0x18>
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	39 f0       	breq	.+14     	; 0x796 <DIO_Port_Write+0x1c>
     788:	08 95       	ret
	{
		case DIO_PortA:
		DIO->PORTA_Reg.All_Reg = Data;
     78a:	6b bb       	out	0x1b, r22	; 27
		break;
     78c:	08 95       	ret
		
		case DIO_PortB:
		DIO->PORTB_Reg.All_Reg = Data;
     78e:	68 bb       	out	0x18, r22	; 24
		break;
     790:	08 95       	ret
		
		case DIO_PortC:
		DIO->PORTC_Reg.All_Reg = Data;
     792:	65 bb       	out	0x15, r22	; 21
		break;
     794:	08 95       	ret
		
		case DIO_PortD:
		DIO->PORTD_Reg.All_Reg = Data;
     796:	62 bb       	out	0x12, r22	; 18
     798:	08 95       	ret

0000079a <DIO_Port_Read>:
}

Uint8 DIO_Port_Read(DIO_Port_Type Port)
{
	Uint8 Data =0;
		switch(Port)
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	41 f0       	breq	.+16     	; 0x7ae <DIO_Port_Read+0x14>
     79e:	28 f0       	brcs	.+10     	; 0x7aa <DIO_Port_Read+0x10>
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	39 f0       	breq	.+14     	; 0x7b2 <DIO_Port_Read+0x18>
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	39 f0       	breq	.+14     	; 0x7b6 <DIO_Port_Read+0x1c>
     7a8:	08 c0       	rjmp	.+16     	; 0x7ba <DIO_Port_Read+0x20>
		{
			case DIO_PortA:
			Data = DIO->PINA_Reg.All_Reg  ;
     7aa:	89 b3       	in	r24, 0x19	; 25
			break;
     7ac:	08 95       	ret
			
			case DIO_PortB:
			Data = DIO->PINB_Reg.All_Reg ;
     7ae:	86 b3       	in	r24, 0x16	; 22
			break;
     7b0:	08 95       	ret
			
			case DIO_PortC:
			Data = DIO->PINC_Reg.All_Reg ;
     7b2:	83 b3       	in	r24, 0x13	; 19
			break;
     7b4:	08 95       	ret
			
			case DIO_PortD:
			Data = DIO->PIND_Reg.All_Reg ;
     7b6:	80 b3       	in	r24, 0x10	; 16
			break;
     7b8:	08 95       	ret
	}
}

Uint8 DIO_Port_Read(DIO_Port_Type Port)
{
	Uint8 Data =0;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
			case DIO_PortD:
			Data = DIO->PIND_Reg.All_Reg ;
			break;
		}
		return Data;	
     7bc:	08 95       	ret

000007be <LCD_Send_Data>:
void LCD_Write_String_xy(String Str , LCD_Line_Type Line ,  LCD_Position_Type Position)
{
	Uint8 First_Char_Adr[] = { LCD_FirstLineAdr_Cmd , LCD_SecLineAdr_Cmd };
	LCD_Command(First_Char_Adr[Line] + Position);
	LCD_Write_String(Str);
}
     7be:	cf 93       	push	r28
     7c0:	c8 2f       	mov	r28, r24
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_Port_Read>
     7c8:	8f 70       	andi	r24, 0x0F	; 15
     7ca:	9c 2f       	mov	r25, r28
     7cc:	90 7f       	andi	r25, 0xF0	; 240
     7ce:	68 2f       	mov	r22, r24
     7d0:	69 2b       	or	r22, r25
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_Port_Write>
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	8b e0       	ldi	r24, 0x0B	; 11
     7dc:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     7e0:	62 e0       	ldi	r22, 0x02	; 2
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Delay_ms>
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	8b e0       	ldi	r24, 0x0B	; 11
     7f0:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Delay_ms>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 cd 03 	call	0x79a	; 0x79a <DIO_Port_Read>
     806:	90 e1       	ldi	r25, 0x10	; 16
     808:	c9 9f       	mul	r28, r25
     80a:	90 01       	movw	r18, r0
     80c:	11 24       	eor	r1, r1
     80e:	8f 70       	andi	r24, 0x0F	; 15
     810:	68 2f       	mov	r22, r24
     812:	62 2b       	or	r22, r18
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_Port_Write>
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	8b e0       	ldi	r24, 0x0B	; 11
     81e:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     822:	62 e0       	ldi	r22, 0x02	; 2
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Delay_ms>
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	8b e0       	ldi	r24, 0x0B	; 11
     832:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Delay_ms>
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <LCD_Command>:
     846:	cf 93       	push	r28
     848:	c8 2f       	mov	r28, r24
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	89 e0       	ldi	r24, 0x09	; 9
     84e:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	8a e0       	ldi	r24, 0x0A	; 10
     856:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     85a:	8c 2f       	mov	r24, r28
     85c:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Send_Data>
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <LCD_Init>:
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	86 e0       	ldi	r24, 0x06	; 6
     878:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	87 e0       	ldi	r24, 0x07	; 7
     880:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	89 e0       	ldi	r24, 0x09	; 9
     888:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	8a e0       	ldi	r24, 0x0A	; 10
     890:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     894:	61 e0       	ldi	r22, 0x01	; 1
     896:	8b e0       	ldi	r24, 0x0B	; 11
     898:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	8a e0       	ldi	r24, 0x0A	; 10
     8a0:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	8b e0       	ldi	r24, 0x0B	; 11
     8a8:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     8ac:	64 e1       	ldi	r22, 0x14	; 20
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Delay_ms>
     8b8:	83 e3       	ldi	r24, 0x33	; 51
     8ba:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     8be:	64 e6       	ldi	r22, 0x64	; 100
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Delay_us>
     8ca:	82 e3       	ldi	r24, 0x32	; 50
     8cc:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     8d0:	88 e2       	ldi	r24, 0x28	; 40
     8d2:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     8d6:	88 e0       	ldi	r24, 0x08	; 8
     8d8:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     8e8:	8c e0       	ldi	r24, 0x0C	; 12
     8ea:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     8ee:	62 e0       	ldi	r22, 0x02	; 2
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Delay_ms>
     8fa:	08 95       	ret

000008fc <LCD_Write_Char>:
     8fc:	cf 93       	push	r28
     8fe:	c8 2f       	mov	r28, r24
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	89 e0       	ldi	r24, 0x09	; 9
     904:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	8a e0       	ldi	r24, 0x0A	; 10
     90c:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
     910:	8c 2f       	mov	r24, r28
     912:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_Send_Data>
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <LCD_Write_String>:
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	8c 01       	movw	r16, r24
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	03 c0       	rjmp	.+6      	; 0x92c <LCD_Write_String+0x12>
     926:	0e 94 7e 04 	call	0x8fc	; 0x8fc <LCD_Write_Char>
     92a:	cf 5f       	subi	r28, 0xFF	; 255
     92c:	f8 01       	movw	r30, r16
     92e:	ec 0f       	add	r30, r28
     930:	f1 1d       	adc	r31, r1
     932:	80 81       	ld	r24, Z
     934:	81 11       	cpse	r24, r1
     936:	f7 cf       	rjmp	.-18     	; 0x926 <LCD_Write_String+0xc>
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_Command(LCD_Clear_Cmd);
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	0e 94 23 04 	call	0x846	; 0x846 <LCD_Command>
     946:	08 95       	ret

00000948 <Led_Init>:

#include "Led.h"

void Led_Init(void)
{
	DIO_Channel_Mode(Led_1,Output);
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	87 e1       	ldi	r24, 0x17	; 23
     94c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
     950:	08 95       	ret

00000952 <Led_Toggle>:
}
void Led_Toggle(void)
{
	DIO_Channel_Toggle(Led_1);
     952:	87 e1       	ldi	r24, 0x17	; 23
     954:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_Channel_Toggle>
     958:	08 95       	ret

0000095a <main>:

#include "Smart_Home_Room.h"

int main(void)
{
	Smart_Home_Room_Init();	
     95a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Smart_Home_Room_Init>
	while (1)
	{
	   Smart_Home_Receive_Cmd_From_Control_Room();
     95e:	0e 94 04 06 	call	0xc08	; 0xc08 <Smart_Home_Receive_Cmd_From_Control_Room>
     962:	fd cf       	rjmp	.-6      	; 0x95e <main+0x4>

00000964 <Servo_Motor_Init>:
*/

#include "Servo_Motor.h"

void Servo_Motor_Init(void)
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	00 d0       	rcall	.+0      	; 0x96a <Servo_Motor_Init+0x6>
     96a:	00 d0       	rcall	.+0      	; 0x96c <Servo_Motor_Init+0x8>
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
	Uint16 ICR1_Value = 0;
	
	DIO_Channel_Mode(Servo_Motor_Channel , Output);
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	8d e1       	ldi	r24, 0x1D	; 29
     974:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
	
	Timer1_CS_Select(Timer1_CS_64Presc);
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	0e 94 02 07 	call	0xe04	; 0xe04 <Timer1_CS_Select>
	ICR1_Value = (Uint16) ( ( F_CPU/(Timer1_Presc*F_W) )-1);
     97e:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <Timer1_Presc>
     982:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <Timer1_Presc+0x1>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	48 e4       	ldi	r20, 0x48	; 72
     994:	52 e4       	ldi	r21, 0x42	; 66
     996:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	74 e2       	ldi	r23, 0x24	; 36
     9a2:	84 e7       	ldi	r24, 0x74	; 116
     9a4:	9b e4       	ldi	r25, 0x4B	; 75
     9a6:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3>
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 e8       	ldi	r20, 0x80	; 128
     9b0:	5f e3       	ldi	r21, 0x3F	; 63
     9b2:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
     9b6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
	Timer1_ICR1_Reg =  ICR1_Value ;
     9ba:	77 bd       	out	0x27, r23	; 39
     9bc:	66 bd       	out	0x26, r22	; 38
	Timer1_Init_Type Timer1_Servo_Motor_Init={Timer1_WG_FastPWM_ICR1_Mode,  Servo_Motor_COM , Timer1_COM_Clear_Mode , Timer1_CS_64Presc};
     9be:	8d e0       	ldi	r24, 0x0D	; 13
     9c0:	89 83       	std	Y+1, r24	; 0x01
     9c2:	1a 82       	std	Y+2, r1	; 0x02
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	8c 83       	std	Y+4, r24	; 0x04
	Timer1_Init(&Timer1_Servo_Motor_Init);
     9cc:	ce 01       	movw	r24, r28
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <Timer1_Init>
}
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <Servo_Motor_Angle>:

void Servo_Motor_Angle(Float32 Angle)
{
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	9b 01       	movw	r18, r22
     9f4:	ac 01       	movw	r20, r24
	Float32 T_Duty =0.0;
	Float32 Duty   =0.0;

	T_Duty = T_Duty_max - (((Angle_max-Angle)/(Angle_max-Angle_min))*(T_Duty_min));
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	84 e3       	ldi	r24, 0x34	; 52
     9fc:	93 e4       	ldi	r25, 0x43	; 67
     9fe:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	44 e3       	ldi	r20, 0x34	; 52
     a08:	53 e4       	ldi	r21, 0x43	; 67
     a0a:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3>
     a0e:	2f e6       	ldi	r18, 0x6F	; 111
     a10:	32 e1       	ldi	r19, 0x12	; 18
     a12:	43 e8       	ldi	r20, 0x83	; 131
     a14:	5a e3       	ldi	r21, 0x3A	; 58
     a16:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	6f e6       	ldi	r22, 0x6F	; 111
     a20:	72 e1       	ldi	r23, 0x12	; 18
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	9b e3       	ldi	r25, 0x3B	; 59
     a26:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
	Duty   = (((T_Duty *F_CPU) / ((Float32)Timer1_Presc*(Timer1_Top+1) ) )*100);
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	34 e2       	ldi	r19, 0x24	; 36
     a2e:	44 e7       	ldi	r20, 0x74	; 116
     a30:	5b e4       	ldi	r21, 0x4B	; 75
     a32:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
     a36:	4b 01       	movw	r8, r22
     a38:	5c 01       	movw	r10, r24
     a3a:	60 91 c3 00 	lds	r22, 0x00C3	; 0x8000c3 <Timer1_Presc>
     a3e:	70 91 c4 00 	lds	r23, 0x00C4	; 0x8000c4 <Timer1_Presc+0x1>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     a4a:	6b 01       	movw	r12, r22
     a4c:	7c 01       	movw	r14, r24
     a4e:	60 91 c1 00 	lds	r22, 0x00C1	; 0x8000c1 <Timer1_Top>
     a52:	70 91 c2 00 	lds	r23, 0x00C2	; 0x8000c2 <Timer1_Top+0x1>
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
     a62:	a7 01       	movw	r20, r14
     a64:	96 01       	movw	r18, r12
     a66:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	c5 01       	movw	r24, r10
     a70:	b4 01       	movw	r22, r8
     a72:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	48 ec       	ldi	r20, 0xC8	; 200
     a7c:	52 e4       	ldi	r21, 0x42	; 66
     a7e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
     a82:	ab 01       	movw	r20, r22
     a84:	bc 01       	movw	r22, r24

	Timer1_NonInv_FPWM_Duty(Servo_Motor_COM,Duty);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 7f 08 	call	0x10fe	; 0x10fe <Timer1_NonInv_FPWM_Duty>
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	9f 90       	pop	r9
     a9a:	8f 90       	pop	r8
     a9c:	08 95       	ret

00000a9e <Smart_Home_Room_Init>:

#include "Smart_Home_Room.h"

void Smart_Home_Room_Init(void)
{
	Delay_Init();
     a9e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Delay_Init>
	SPI_Slave_Init();
     aa2:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_Slave_Init>
	Led_Init();
     aa6:	0e 94 a4 04 	call	0x948	; 0x948 <Led_Init>
	LCD_Init();
     aaa:	0e 94 32 04 	call	0x864	; 0x864 <LCD_Init>
	DC_Motor_Init();
     aae:	0e 94 9d 00 	call	0x13a	; 0x13a <DC_Motor_Init>
	Servo_Motor_Init();
     ab2:	0e 94 b2 04 	call	0x964	; 0x964 <Servo_Motor_Init>
	Temp_Sensor_Init();
     ab6:	0e 94 9a 06 	call	0xd34	; 0xd34 <Temp_Sensor_Init>
     aba:	08 95       	ret

00000abc <Smart_Home_LCD_Display>:
}

void Smart_Home_LCD_Display(String Str1 , String Str2)
{
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	8c 01       	movw	r16, r24
     ac6:	eb 01       	movw	r28, r22
	LCD_Clear();
     ac8:	0e 94 a0 04 	call	0x940	; 0x940 <LCD_Clear>
	LCD_Write_String(Str1);
     acc:	c8 01       	movw	r24, r16
     ace:	0e 94 8d 04 	call	0x91a	; 0x91a <LCD_Write_String>
	LCD_Write_String(Str2);
     ad2:	ce 01       	movw	r24, r28
     ad4:	0e 94 8d 04 	call	0x91a	; 0x91a <LCD_Write_String>
}
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	08 95       	ret

00000ae2 <Smart_Home_Send_Data_To_Control_Room>:

void Smart_Home_Send_Data_To_Control_Room(Smart_Home_Confirm_Type Confirm_msg , Uint16 Data)
{
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	d6 2f       	mov	r29, r22
     ae8:	c7 2f       	mov	r28, r23
	SPI_Slave_Send_Data(Confirm_msg);
     aea:	0e 94 86 06 	call	0xd0c	; 0xd0c <SPI_Slave_Send_Data>
	while (SPI_Slave_Recieve_Data() != Data_Signal);
     aee:	0e 94 92 06 	call	0xd24	; 0xd24 <SPI_Slave_Recieve_Data>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	e1 f7       	brne	.-8      	; 0xaee <Smart_Home_Send_Data_To_Control_Room+0xc>
	SPI_Slave_Send_Data((Uint8)(Data));
     af6:	8d 2f       	mov	r24, r29
     af8:	0e 94 86 06 	call	0xd0c	; 0xd0c <SPI_Slave_Send_Data>
	while (SPI_Slave_Recieve_Data() != Data_Signal);
     afc:	0e 94 92 06 	call	0xd24	; 0xd24 <SPI_Slave_Recieve_Data>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	e1 f7       	brne	.-8      	; 0xafc <Smart_Home_Send_Data_To_Control_Room+0x1a>
	SPI_Slave_Send_Data((Uint8)(Data>>STD_Reg_Bits_Number));
     b04:	8c 2f       	mov	r24, r28
     b06:	0e 94 86 06 	call	0xd0c	; 0xd0c <SPI_Slave_Send_Data>
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <Smart_Home_Toggle_Light_Task>:

void Smart_Home_Toggle_Light_Task(Uint8* Toggle_Count)
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ec 01       	movw	r28, r24
	Uint16 Light_State = 0;
	String Light_State_str;
	Led_Toggle();
     b16:	0e 94 a9 04 	call	0x952	; 0x952 <Led_Toggle>
	*Toggle_Count+=1;
     b1a:	88 81       	ld	r24, Y
     b1c:	8f 5f       	subi	r24, 0xFF	; 255
     b1e:	88 83       	st	Y, r24
	if (*Toggle_Count==2)
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	31 f4       	brne	.+12     	; 0xb30 <Smart_Home_Toggle_Light_Task+0x20>
	{
		Light_State = Room_Light_Is_Off;
		Light_State_str="OFF";
		*Toggle_Count=0;
     b24:	18 82       	st	Y, r1
	Led_Toggle();
	*Toggle_Count+=1;
	if (*Toggle_Count==2)
	{
		Light_State = Room_Light_Is_Off;
		Light_State_str="OFF";
     b26:	60 e6       	ldi	r22, 0x60	; 96
     b28:	70 e0       	ldi	r23, 0x00	; 0
	String Light_State_str;
	Led_Toggle();
	*Toggle_Count+=1;
	if (*Toggle_Count==2)
	{
		Light_State = Room_Light_Is_Off;
     b2a:	c9 e9       	ldi	r28, 0x99	; 153
     b2c:	d0 e0       	ldi	r29, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <Smart_Home_Toggle_Light_Task+0x28>
		*Toggle_Count=0;
	}
	else
	{
		Light_State = Room_Light_Is_On;
		Light_State_str="On";
     b30:	64 e6       	ldi	r22, 0x64	; 100
     b32:	70 e0       	ldi	r23, 0x00	; 0
		Light_State_str="OFF";
		*Toggle_Count=0;
	}
	else
	{
		Light_State = Room_Light_Is_On;
     b34:	c6 e6       	ldi	r28, 0x66	; 102
     b36:	d0 e0       	ldi	r29, 0x00	; 0
		Light_State_str="On";
	}
	Smart_Home_LCD_Display("Light: " , Light_State_str);
     b38:	87 e6       	ldi	r24, 0x67	; 103
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 5e 05 	call	0xabc	; 0xabc <Smart_Home_LCD_Display>
	Smart_Home_Send_Data_To_Control_Room(Smart_Home_Toggle_Light_Confirm , Light_State);
     b40:	be 01       	movw	r22, r28
     b42:	89 e0       	ldi	r24, 0x09	; 9
     b44:	0e 94 71 05 	call	0xae2	; 0xae2 <Smart_Home_Send_Data_To_Control_Room>
}
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	08 95       	ret

00000b4e <Smart_Home_Measure_Temp_Task>:

void Smart_Home_Measure_Temp_Task()
{
	String Temp_Value_String;
	Temp_Value_String = Temp_Sensor_Read_String();
     b4e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <Temp_Sensor_Read_String>
	Smart_Home_LCD_Display("Temperature: " , Temp_Value_String);
     b52:	bc 01       	movw	r22, r24
     b54:	8f e6       	ldi	r24, 0x6F	; 111
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 5e 05 	call	0xabc	; 0xabc <Smart_Home_LCD_Display>
	Smart_Home_Send_Data_To_Control_Room(Smart_Home_Measure_Temp_Confirm ,Temp_Sensor_Read_Value());
     b5c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <Temp_Sensor_Read_Value>
     b60:	bc 01       	movw	r22, r24
     b62:	8a ea       	ldi	r24, 0xAA	; 170
     b64:	0e 94 71 05 	call	0xae2	; 0xae2 <Smart_Home_Send_Data_To_Control_Room>
     b68:	08 95       	ret

00000b6a <Smart_Home_SpeedUP_Motor_Task>:
}

void Smart_Home_SpeedUP_Motor_Task()
{
	DC_Motor_CW(DC_Motor_High_Speed);
     b6a:	8b e4       	ldi	r24, 0x4B	; 75
     b6c:	0e 94 be 00 	call	0x17c	; 0x17c <DC_Motor_CW>
	Smart_Home_LCD_Display("Fan: " ,"Speed Up");
     b70:	6d e7       	ldi	r22, 0x7D	; 125
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	86 e8       	ldi	r24, 0x86	; 134
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 5e 05 	call	0xabc	; 0xabc <Smart_Home_LCD_Display>
	Smart_Home_Send_Data_To_Control_Room(Smart_Home_SpeedUP_Motor_Confirm , DC_Motor_High_Speed);
     b7c:	6b e4       	ldi	r22, 0x4B	; 75
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	85 e6       	ldi	r24, 0x65	; 101
     b82:	0e 94 71 05 	call	0xae2	; 0xae2 <Smart_Home_Send_Data_To_Control_Room>
     b86:	08 95       	ret

00000b88 <Smart_Home_SpeedDown_Motor_Task>:
}

void Smart_Home_SpeedDown_Motor_Task()
{
	DC_Motor_CW(DC_Motor_Low_Speed);
     b88:	89 e1       	ldi	r24, 0x19	; 25
     b8a:	0e 94 be 00 	call	0x17c	; 0x17c <DC_Motor_CW>
	Smart_Home_LCD_Display("Fan: " ,"Speed Down");
     b8e:	6c e8       	ldi	r22, 0x8C	; 140
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	86 e8       	ldi	r24, 0x86	; 134
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 5e 05 	call	0xabc	; 0xabc <Smart_Home_LCD_Display>
	Smart_Home_Send_Data_To_Control_Room(Smart_Home_SpeedDown_Motor_Confirm , DC_Motor_Low_Speed);
     b9a:	69 e1       	ldi	r22, 0x19	; 25
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	84 e4       	ldi	r24, 0x44	; 68
     ba0:	0e 94 71 05 	call	0xae2	; 0xae2 <Smart_Home_Send_Data_To_Control_Room>
     ba4:	08 95       	ret

00000ba6 <Smart_Home_Stop_Motor_Task>:
}

void Smart_Home_Stop_Motor_Task()
{
	DC_Motor_Stop();
     ba6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <DC_Motor_Stop>
	Smart_Home_LCD_Display("Fan: " ,"Stopped");
     baa:	67 e9       	ldi	r22, 0x97	; 151
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	86 e8       	ldi	r24, 0x86	; 134
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 5e 05 	call	0xabc	; 0xabc <Smart_Home_LCD_Display>
	Smart_Home_Send_Data_To_Control_Room(Smart_Home_Stop_Motor_Confirm , 0x0000);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	89 e9       	ldi	r24, 0x99	; 153
     bbc:	0e 94 71 05 	call	0xae2	; 0xae2 <Smart_Home_Send_Data_To_Control_Room>
     bc0:	08 95       	ret

00000bc2 <Smart_Home_Close_Door_Task>:
}

void Smart_Home_Close_Door_Task()
{
	Servo_Motor_Angle(Door_Close_Angle);
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	cb 01       	movw	r24, r22
     bc8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Servo_Motor_Angle>
	Smart_Home_LCD_Display("Door: " ,"Closed");
     bcc:	6f e9       	ldi	r22, 0x9F	; 159
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	86 ea       	ldi	r24, 0xA6	; 166
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 5e 05 	call	0xabc	; 0xabc <Smart_Home_LCD_Display>
	Smart_Home_Send_Data_To_Control_Room(Smart_Home_Close_Door_Confirm, (Uint16)Door_Close_Angle);
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	87 e7       	ldi	r24, 0x77	; 119
     bde:	0e 94 71 05 	call	0xae2	; 0xae2 <Smart_Home_Send_Data_To_Control_Room>
     be2:	08 95       	ret

00000be4 <Smart_Home_Open_Door_Task>:
}

void Smart_Home_Open_Door_Task()
{
	Servo_Motor_Angle(Door_Open_Angle);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	84 eb       	ldi	r24, 0xB4	; 180
     bea:	92 e4       	ldi	r25, 0x42	; 66
     bec:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Servo_Motor_Angle>
	Smart_Home_LCD_Display("Door: " ,"Opened");
     bf0:	6d ea       	ldi	r22, 0xAD	; 173
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	86 ea       	ldi	r24, 0xA6	; 166
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 5e 05 	call	0xabc	; 0xabc <Smart_Home_LCD_Display>
	Smart_Home_Send_Data_To_Control_Room(Smart_Home_Open_Door_Confirm, (Uint16)Door_Open_Angle);
     bfc:	6a e5       	ldi	r22, 0x5A	; 90
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	88 e8       	ldi	r24, 0x88	; 136
     c02:	0e 94 71 05 	call	0xae2	; 0xae2 <Smart_Home_Send_Data_To_Control_Room>
     c06:	08 95       	ret

00000c08 <Smart_Home_Receive_Cmd_From_Control_Room>:

void Smart_Home_Receive_Cmd_From_Control_Room(void)
{
    Smart_Home_Cmd_Type Cmd_From_Control_Room;
	static Uint8 Toggle_Count =0 ;
	Cmd_From_Control_Room = SPI_Slave_Recieve_Data(); 
     c08:	0e 94 92 06 	call	0xd24	; 0xd24 <SPI_Slave_Recieve_Data>
	switch(Cmd_From_Control_Room)
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	f0 97       	sbiw	r30, 0x30	; 48
     c12:	e7 30       	cpi	r30, 0x07	; 7
     c14:	f1 05       	cpc	r31, r1
     c16:	d0 f4       	brcc	.+52     	; 0xc4c <Smart_Home_Receive_Cmd_From_Control_Room+0x44>
     c18:	e6 5b       	subi	r30, 0xB6	; 182
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__tablejump2__>
	{
		case Smart_Home_Toggle_Light_Cmd:
		Smart_Home_Toggle_Light_Task(&Toggle_Count);
     c20:	84 eb       	ldi	r24, 0xB4	; 180
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 88 05 	call	0xb10	; 0xb10 <Smart_Home_Toggle_Light_Task>
		break;
     c28:	08 95       	ret
		
		case Smart_Home_Measure_Temp_Cmd:
		Smart_Home_Measure_Temp_Task();
     c2a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <Smart_Home_Measure_Temp_Task>
		break;
     c2e:	08 95       	ret
		
		case Smart_Home_SpeedUP_Motor_Cmd:
		Smart_Home_SpeedUP_Motor_Task();
     c30:	0e 94 b5 05 	call	0xb6a	; 0xb6a <Smart_Home_SpeedUP_Motor_Task>
		break;
     c34:	08 95       	ret
		
		case Smart_Home_SpeedDown_Motor_Cmd:
		Smart_Home_SpeedDown_Motor_Task();
     c36:	0e 94 c4 05 	call	0xb88	; 0xb88 <Smart_Home_SpeedDown_Motor_Task>
		break;
     c3a:	08 95       	ret
		
		case Smart_Home_Stop_Motor_Cmd:
		Smart_Home_Stop_Motor_Task();
     c3c:	0e 94 d3 05 	call	0xba6	; 0xba6 <Smart_Home_Stop_Motor_Task>
		break;
     c40:	08 95       	ret
		
		case Smart_Home_Close_Door_Cmd:
		Smart_Home_Close_Door_Task();
     c42:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Smart_Home_Close_Door_Task>
		break;
     c46:	08 95       	ret
		
		case Smart_Home_Open_Door_Cmd:
		Smart_Home_Open_Door_Task();
     c48:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Smart_Home_Open_Door_Task>
     c4c:	08 95       	ret

00000c4e <SPI_Init>:
*/

#include "SPI.h"

void  SPI_Init(SPI_Init_Type * SPI_Init_Instace)
{
     c4e:	fc 01       	movw	r30, r24
	SPI_State_Select(SPI_Init_Instace->SPI_State);
     c50:	90 81       	ld	r25, Z
     c52:	8d b1       	in	r24, 0x0d	; 13
     c54:	90 fb       	bst	r25, 0
     c56:	84 f9       	bld	r24, 4
     c58:	8d b9       	out	0x0d, r24	; 13
	SPI_Data_Order_Select(SPI_Init_Instace->SPI_Data_Order);
     c5a:	91 81       	ldd	r25, Z+1	; 0x01
     c5c:	8d b1       	in	r24, 0x0d	; 13
     c5e:	90 fb       	bst	r25, 0
     c60:	85 f9       	bld	r24, 5
     c62:	8d b9       	out	0x0d, r24	; 13
	SPI_Presc_Select(SPI_Init_Instace->SPI_Presc);
     c64:	92 81       	ldd	r25, Z+2	; 0x02
     c66:	29 2f       	mov	r18, r25
     c68:	23 70       	andi	r18, 0x03	; 3
     c6a:	9d b1       	in	r25, 0x0d	; 13
     c6c:	9c 7f       	andi	r25, 0xFC	; 252
     c6e:	92 2b       	or	r25, r18
     c70:	9d b9       	out	0x0d, r25	; 13
	switch(SPI_Init_Instace->SPI_State)
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	b1 f0       	breq	.+44     	; 0xca4 <SPI_Init+0x56>
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	59 f5       	brne	.+86     	; 0xcd2 <SPI_Init+0x84>
	{
		case SPI_State_Master:
		DIO_Channel_Mode(SS,Output);
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	8c e0       	ldi	r24, 0x0C	; 12
     c80:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		DIO_Channel_Mode(MOSI,Output);
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	8d e0       	ldi	r24, 0x0D	; 13
     c88:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		DIO_Channel_Mode(MISO,Input);
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	8e e0       	ldi	r24, 0x0E	; 14
     c90:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		DIO_Channel_Mode(SCK,Output);
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	8f e0       	ldi	r24, 0x0F	; 15
     c98:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		SPI_Enable();
     c9c:	8d b1       	in	r24, 0x0d	; 13
     c9e:	80 64       	ori	r24, 0x40	; 64
     ca0:	8d b9       	out	0x0d, r24	; 13
		break;
     ca2:	08 95       	ret
		
		case SPI_State_Slave:
		DIO_Channel_Mode(SS,Input);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	8c e0       	ldi	r24, 0x0C	; 12
     ca8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		DIO_Channel_Write(SS,STD_High);
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	8c e0       	ldi	r24, 0x0C	; 12
     cb0:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_Channel_Write>
		DIO_Channel_Mode(MOSI,Input);
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	8d e0       	ldi	r24, 0x0D	; 13
     cb8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		DIO_Channel_Mode(MISO,Output);
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	8e e0       	ldi	r24, 0x0E	; 14
     cc0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		DIO_Channel_Mode(SCK,Input);
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	8f e0       	ldi	r24, 0x0F	; 15
     cc8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_Channel_Mode>
		SPI_Enable();
     ccc:	8d b1       	in	r24, 0x0d	; 13
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	8d b9       	out	0x0d, r24	; 13
     cd2:	08 95       	ret

00000cd4 <SPI_Send_Data>:
	
}

void  SPI_Send_Data(Uint8 Data)
{
	SPI_Data_Reg = Data;
     cd4:	8f b9       	out	0x0f, r24	; 15
	while(SPI_IS_Transfer_Complete()==STD_Low);
     cd6:	77 9b       	sbis	0x0e, 7	; 14
     cd8:	fe cf       	rjmp	.-4      	; 0xcd6 <SPI_Send_Data+0x2>
}
     cda:	08 95       	ret

00000cdc <SPI_Recieve_Data>:

Uint8 SPI_Recieve_Data(void)
{
	while(SPI_IS_Transfer_Complete()==STD_Low);
     cdc:	77 9b       	sbis	0x0e, 7	; 14
     cde:	fe cf       	rjmp	.-4      	; 0xcdc <SPI_Recieve_Data>
	return SPI_Data_Reg;
     ce0:	8f b1       	in	r24, 0x0f	; 15
}
     ce2:	08 95       	ret

00000ce4 <SPI_Slave_Init>:
*/

#include "SPI_Slave.h"

void SPI_Slave_Init(void)
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	00 d0       	rcall	.+0      	; 0xcea <SPI_Slave_Init+0x6>
     cea:	1f 92       	push	r1
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	SPI_Init_Type SPI_Init_Slave= {SPI_State_Slave,SPI_Data_Order_MSB,SPI_Presc_16};
     cf0:	19 82       	std	Y+1, r1	; 0x01
     cf2:	1a 82       	std	Y+2, r1	; 0x02
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	8b 83       	std	Y+3, r24	; 0x03
	SPI_Init(&SPI_Init_Slave);
     cf8:	ce 01       	movw	r24, r28
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	0e 94 27 06 	call	0xc4e	; 0xc4e <SPI_Init>
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <SPI_Slave_Send_Data>:
void SPI_Slave_Send_Data(Uint8 Data)
{
     d0c:	cf 93       	push	r28
     d0e:	c8 2f       	mov	r28, r24
	while (SPI_IS_Slave_Enabled()==STD_Low);
     d10:	8c e0       	ldi	r24, 0x0C	; 12
     d12:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_Channel_Read>
     d16:	81 11       	cpse	r24, r1
     d18:	fb cf       	rjmp	.-10     	; 0xd10 <SPI_Slave_Send_Data+0x4>
	SPI_Send_Data(Data);
     d1a:	8c 2f       	mov	r24, r28
     d1c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <SPI_Send_Data>
}
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <SPI_Slave_Recieve_Data>:
Uint8 SPI_Slave_Recieve_Data(void)

{
	while (SPI_IS_Slave_Enabled()==STD_Low);
     d24:	8c e0       	ldi	r24, 0x0C	; 12
     d26:	0e 94 73 03 	call	0x6e6	; 0x6e6 <DIO_Channel_Read>
     d2a:	81 11       	cpse	r24, r1
     d2c:	fb cf       	rjmp	.-10     	; 0xd24 <SPI_Slave_Recieve_Data>
	return SPI_Recieve_Data();
     d2e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <SPI_Recieve_Data>
     d32:	08 95       	ret

00000d34 <Temp_Sensor_Init>:
#include "Temp_Sensor.h"
#include <stdlib.h>

void   Temp_Sensor_Init(void)
{
	ADC_Init();
     d34:	0e 94 7f 00 	call	0xfe	; 0xfe <ADC_Init>
     d38:	08 95       	ret

00000d3a <Temp_Sensor_Read_Value>:
Uint16 Temp_Sensor_Read_Value(void)
{
	Uint16 Voltage_Value = 0 ;
	Uint16 Temp_Value    = 0 ;
		
	Voltage_Value = ADC_Channel_Read(Temp_Sensor_Channel);
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 89 00 	call	0x112	; 0x112 <ADC_Channel_Read>
	Temp_Value    = Voltage_Value/4;
	return Temp_Value;
}
     d40:	96 95       	lsr	r25
     d42:	87 95       	ror	r24
     d44:	96 95       	lsr	r25
     d46:	87 95       	ror	r24
     d48:	08 95       	ret

00000d4a <Temp_Sensor_Read_String>:

String Temp_Sensor_Read_String(void)
{
		Uint16 Temp_Value = 0;
		static Sint8 Temp_String[3];
		Temp_Value = Temp_Sensor_Read_Value();
     d4a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <Temp_Sensor_Read_Value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     d4e:	4a e0       	ldi	r20, 0x0A	; 10
     d50:	65 eb       	ldi	r22, 0xB5	; 181
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__itoa_ncheck>
		itoa(Temp_Value,Temp_String,10);
		return Temp_String;	
}
     d58:	85 eb       	ldi	r24, 0xB5	; 181
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	08 95       	ret

00000d5e <Timer0_CS_Select>:
#include "Timer0.h"

Uint8 Timer0_CS_Select(Timer0_CS_Type ClockSource)
{
	Uint16 Prescaler = 0;
	Timer0_TCCR0_Reg->CS0_Bits = ClockSource ;
     d5e:	28 2f       	mov	r18, r24
     d60:	27 70       	andi	r18, 0x07	; 7
     d62:	93 b7       	in	r25, 0x33	; 51
     d64:	98 7f       	andi	r25, 0xF8	; 248
     d66:	92 2b       	or	r25, r18
     d68:	93 bf       	out	0x33, r25	; 51
	switch(ClockSource)
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	51 f0       	breq	.+20     	; 0xd82 <Timer0_CS_Select+0x24>
     d6e:	18 f4       	brcc	.+6      	; 0xd76 <Timer0_CS_Select+0x18>
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	69 f0       	breq	.+26     	; 0xd8e <Timer0_CS_Select+0x30>
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <Timer0_CS_Select+0x20>
     d76:	84 30       	cpi	r24, 0x04	; 4
     d78:	31 f0       	breq	.+12     	; 0xd86 <Timer0_CS_Select+0x28>
     d7a:	85 30       	cpi	r24, 0x05	; 5
     d7c:	31 f0       	breq	.+12     	; 0xd8a <Timer0_CS_Select+0x2c>

#include "Timer0.h"

Uint8 Timer0_CS_Select(Timer0_CS_Type ClockSource)
{
	Uint16 Prescaler = 0;
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	08 95       	ret
		break;
		case Timer0_CS_8Presc:
		Prescaler = 8;
		break;
		case Timer0_CS_64Presc:
		Prescaler = 64;
     d82:	80 e4       	ldi	r24, 0x40	; 64
		break;
     d84:	08 95       	ret
		case Timer0_CS_256Presc:
		Prescaler = 256;
     d86:	80 e0       	ldi	r24, 0x00	; 0
		break;
     d88:	08 95       	ret
		case Timer0_CS_1024Presc:
		Prescaler = 1024;
     d8a:	80 e0       	ldi	r24, 0x00	; 0
		break;
     d8c:	08 95       	ret
		case Timer0_CS_ExtCS_FallingEdge:
		case Timer0_CS_ExtCS_RisingEdge:
		Prescaler = 0;
		break;
		case Timer0_CS_8Presc:
		Prescaler = 8;
     d8e:	88 e0       	ldi	r24, 0x08	; 8
		case Timer0_CS_1024Presc:
		Prescaler = 1024;
		break;
	}
	return Prescaler;
}
     d90:	08 95       	ret

00000d92 <Timer0_Mode_Select>:

void Timer0_Mode_Select(Timer0_WG_Mode_Type WG_Mode , Timer0_COM_Mode_Type CMO_Mode)
{
	switch(WG_Mode)
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	69 f0       	breq	.+26     	; 0xdb0 <Timer0_Mode_Select+0x1e>
     d96:	28 f0       	brcs	.+10     	; 0xda2 <Timer0_Mode_Select+0x10>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	89 f0       	breq	.+34     	; 0xdbe <Timer0_Mode_Select+0x2c>
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	b1 f0       	breq	.+44     	; 0xdcc <Timer0_Mode_Select+0x3a>
     da0:	1b c0       	rjmp	.+54     	; 0xdd8 <Timer0_Mode_Select+0x46>
	{
		case Timer0_WG_Normal_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_Low;
     da2:	83 b7       	in	r24, 0x33	; 51
     da4:	87 7f       	andi	r24, 0xF7	; 247
     da6:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_Low;
     da8:	83 b7       	in	r24, 0x33	; 51
     daa:	8f 7b       	andi	r24, 0xBF	; 191
     dac:	83 bf       	out	0x33, r24	; 51
		break;
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <Timer0_Mode_Select+0x46>
		
		case Timer0_WG_PWM_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_Low;
     db0:	83 b7       	in	r24, 0x33	; 51
     db2:	87 7f       	andi	r24, 0xF7	; 247
     db4:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_High;
     db6:	83 b7       	in	r24, 0x33	; 51
     db8:	80 64       	ori	r24, 0x40	; 64
     dba:	83 bf       	out	0x33, r24	; 51
		break;
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <Timer0_Mode_Select+0x46>
		
		case Timer0_WG_CTC_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_High;
     dbe:	83 b7       	in	r24, 0x33	; 51
     dc0:	88 60       	ori	r24, 0x08	; 8
     dc2:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_Low;
     dc4:	83 b7       	in	r24, 0x33	; 51
     dc6:	8f 7b       	andi	r24, 0xBF	; 191
     dc8:	83 bf       	out	0x33, r24	; 51
		break;
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <Timer0_Mode_Select+0x46>
		
		case Timer0_WG_FastPWM_Mode:
		Timer0_TCCR0_Reg->WGM01_Bit=STD_High;
     dcc:	83 b7       	in	r24, 0x33	; 51
     dce:	88 60       	ori	r24, 0x08	; 8
     dd0:	83 bf       	out	0x33, r24	; 51
		Timer0_TCCR0_Reg->WGM00_Bit=STD_High;
     dd2:	83 b7       	in	r24, 0x33	; 51
     dd4:	80 64       	ori	r24, 0x40	; 64
     dd6:	83 bf       	out	0x33, r24	; 51
		break;
	}
	Timer0_TCCR0_Reg->COM0_Bits = CMO_Mode;
     dd8:	63 70       	andi	r22, 0x03	; 3
     dda:	86 2f       	mov	r24, r22
     ddc:	82 95       	swap	r24
     dde:	80 7f       	andi	r24, 0xF0	; 240
     de0:	63 b7       	in	r22, 0x33	; 51
     de2:	6f 7c       	andi	r22, 0xCF	; 207
     de4:	68 2b       	or	r22, r24
     de6:	63 bf       	out	0x33, r22	; 51
     de8:	08 95       	ret

00000dea <Timer0_Init>:
}

void  Timer0_Init(Timer0_Init_Type* Timer0_Init_Instance)
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	ec 01       	movw	r28, r24
    Timer0_CS_Select(Timer0_Init_Instance->CS);
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	0e 94 af 06 	call	0xd5e	; 0xd5e <Timer0_CS_Select>
	Timer0_Mode_Select(Timer0_Init_Instance->WG_Mode , Timer0_Init_Instance->COM_Mode);	
     df6:	69 81       	ldd	r22, Y+1	; 0x01
     df8:	88 81       	ld	r24, Y
     dfa:	0e 94 c9 06 	call	0xd92	; 0xd92 <Timer0_Mode_Select>
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <Timer1_CS_Select>:
#include "Timer1.h"

void Timer1_CS_Select(Timer1_CS_Type ClockSource)
{
	
	Timer1_TCCR1B_Reg->CS1_Bits = ClockSource ;
     e04:	28 2f       	mov	r18, r24
     e06:	27 70       	andi	r18, 0x07	; 7
     e08:	9e b5       	in	r25, 0x2e	; 46
     e0a:	98 7f       	andi	r25, 0xF8	; 248
     e0c:	92 2b       	or	r25, r18
     e0e:	9e bd       	out	0x2e, r25	; 46
	Timer1_Presc = 1;
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	30 93 c4 00 	sts	0x00C4, r19	; 0x8000c4 <Timer1_Presc+0x1>
     e18:	20 93 c3 00 	sts	0x00C3, r18	; 0x8000c3 <Timer1_Presc>
	switch(ClockSource)
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	81 f0       	breq	.+32     	; 0xe40 <Timer1_CS_Select+0x3c>
     e20:	18 f4       	brcc	.+6      	; 0xe28 <Timer1_CS_Select+0x24>
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	31 f0       	breq	.+12     	; 0xe32 <Timer1_CS_Select+0x2e>
     e26:	08 95       	ret
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	89 f0       	breq	.+34     	; 0xe4e <Timer1_CS_Select+0x4a>
     e2c:	85 30       	cpi	r24, 0x05	; 5
     e2e:	b1 f0       	breq	.+44     	; 0xe5c <Timer1_CS_Select+0x58>
     e30:	08 95       	ret
		case Timer1_CS_NoPresc:
		Timer1_Presc = 1;
		break;

		case Timer1_CS_8Presc:
		Timer1_Presc = 8;
     e32:	88 e0       	ldi	r24, 0x08	; 8
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <Timer1_Presc+0x1>
     e3a:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Timer1_Presc>
		break;
     e3e:	08 95       	ret
		
		case Timer1_CS_64Presc:
		Timer1_Presc = 64;
     e40:	80 e4       	ldi	r24, 0x40	; 64
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <Timer1_Presc+0x1>
     e48:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Timer1_Presc>
		break;
     e4c:	08 95       	ret
		
		case Timer1_CS_256Presc:
		Timer1_Presc = 256;
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <Timer1_Presc+0x1>
     e56:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Timer1_Presc>
		break;
     e5a:	08 95       	ret
		
		case Timer1_CS_1024Presc:
		Timer1_Presc = 1024;
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	94 e0       	ldi	r25, 0x04	; 4
     e60:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <Timer1_Presc+0x1>
     e64:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <Timer1_Presc>
     e68:	08 95       	ret

00000e6a <Timer1_Mode_Select>:
	}
}

void Timer1_Mode_Select(Timer1_WG_Mode_Type WG_Mode ,Timer1_COM_Type COM_Type, Timer1_COM_Mode_Type COM_Mode)
{
	switch(WG_Mode)
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	8f 30       	cpi	r24, 0x0F	; 15
     e6e:	91 05       	cpc	r25, r1
     e70:	08 f0       	brcs	.+2      	; 0xe74 <Timer1_Mode_Select+0xa>
     e72:	21 c1       	rjmp	.+578    	; 0x10b6 <Timer1_Mode_Select+0x24c>
     e74:	fc 01       	movw	r30, r24
     e76:	ef 5a       	subi	r30, 0xAF	; 175
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__tablejump2__>
	{
		case Timer1_WG_Normal_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     e7e:	8e b5       	in	r24, 0x2e	; 46
     e80:	8f 7e       	andi	r24, 0xEF	; 239
     e82:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     e84:	8e b5       	in	r24, 0x2e	; 46
     e86:	87 7f       	andi	r24, 0xF7	; 247
     e88:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     e8a:	8f b5       	in	r24, 0x2f	; 47
     e8c:	8d 7f       	andi	r24, 0xFD	; 253
     e8e:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     e90:	8f b5       	in	r24, 0x2f	; 47
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top =0xFFFF;
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     e9e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     ea2:	09 c1       	rjmp	.+530    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_PWM_8Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     ea4:	8e b5       	in	r24, 0x2e	; 46
     ea6:	8f 7e       	andi	r24, 0xEF	; 239
     ea8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     eaa:	8e b5       	in	r24, 0x2e	; 46
     eac:	87 7f       	andi	r24, 0xF7	; 247
     eae:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     eb0:	8f b5       	in	r24, 0x2f	; 47
     eb2:	8d 7f       	andi	r24, 0xFD	; 253
     eb4:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     eb6:	8f b5       	in	r24, 0x2f	; 47
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top =255;
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     ec4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     ec8:	f6 c0       	rjmp	.+492    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_PWM_9Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     eca:	8e b5       	in	r24, 0x2e	; 46
     ecc:	8f 7e       	andi	r24, 0xEF	; 239
     ece:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     ed0:	8e b5       	in	r24, 0x2e	; 46
     ed2:	87 7f       	andi	r24, 0xF7	; 247
     ed4:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     ed6:	8f b5       	in	r24, 0x2f	; 47
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     edc:	8f b5       	in	r24, 0x2f	; 47
     ede:	8e 7f       	andi	r24, 0xFE	; 254
     ee0:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 511;
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     eea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     eee:	e3 c0       	rjmp	.+454    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_PWM_10Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     ef0:	8e b5       	in	r24, 0x2e	; 46
     ef2:	8f 7e       	andi	r24, 0xEF	; 239
     ef4:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     ef6:	8e b5       	in	r24, 0x2e	; 46
     ef8:	87 7f       	andi	r24, 0xF7	; 247
     efa:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     efc:	8f b5       	in	r24, 0x2f	; 47
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     f02:	8f b5       	in	r24, 0x2f	; 47
     f04:	81 60       	ori	r24, 0x01	; 1
     f06:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 1023;
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	93 e0       	ldi	r25, 0x03	; 3
     f0c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     f10:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     f14:	d0 c0       	rjmp	.+416    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_CTC_OCR1A_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     f16:	8e b5       	in	r24, 0x2e	; 46
     f18:	8f 7e       	andi	r24, 0xEF	; 239
     f1a:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     f1c:	8e b5       	in	r24, 0x2e	; 46
     f1e:	88 60       	ori	r24, 0x08	; 8
     f20:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     f22:	8f b5       	in	r24, 0x2f	; 47
     f24:	8d 7f       	andi	r24, 0xFD	; 253
     f26:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     f28:	8f b5       	in	r24, 0x2f	; 47
     f2a:	8e 7f       	andi	r24, 0xFE	; 254
     f2c:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg ;
     f2e:	8a b5       	in	r24, 0x2a	; 42
     f30:	9b b5       	in	r25, 0x2b	; 43
     f32:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     f36:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     f3a:	bd c0       	rjmp	.+378    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_FastPWM_8Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     f3c:	8e b5       	in	r24, 0x2e	; 46
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     f42:	8e b5       	in	r24, 0x2e	; 46
     f44:	88 60       	ori	r24, 0x08	; 8
     f46:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     f48:	8f b5       	in	r24, 0x2f	; 47
     f4a:	8d 7f       	andi	r24, 0xFD	; 253
     f4c:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     f4e:	8f b5       	in	r24, 0x2f	; 47
     f50:	81 60       	ori	r24, 0x01	; 1
     f52:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 255;
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     f5c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     f60:	aa c0       	rjmp	.+340    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_FastPWM_9Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     f62:	8e b5       	in	r24, 0x2e	; 46
     f64:	8f 7e       	andi	r24, 0xEF	; 239
     f66:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     f68:	8e b5       	in	r24, 0x2e	; 46
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     f6e:	8f b5       	in	r24, 0x2f	; 47
     f70:	82 60       	ori	r24, 0x02	; 2
     f72:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     f74:	8f b5       	in	r24, 0x2f	; 47
     f76:	8e 7f       	andi	r24, 0xFE	; 254
     f78:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 511;
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     f82:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     f86:	97 c0       	rjmp	.+302    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_FastPWM_10Bit_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_Low;
     f88:	8e b5       	in	r24, 0x2e	; 46
     f8a:	8f 7e       	andi	r24, 0xEF	; 239
     f8c:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
     f8e:	8e b5       	in	r24, 0x2e	; 46
     f90:	88 60       	ori	r24, 0x08	; 8
     f92:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
     f94:	8f b5       	in	r24, 0x2f	; 47
     f96:	82 60       	ori	r24, 0x02	; 2
     f98:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     f9a:	8f b5       	in	r24, 0x2f	; 47
     f9c:	81 60       	ori	r24, 0x01	; 1
     f9e:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = 1023;
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	93 e0       	ldi	r25, 0x03	; 3
     fa4:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     fa8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     fac:	84 c0       	rjmp	.+264    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_PWM_ICR1_B_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     fae:	8e b5       	in	r24, 0x2e	; 46
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     fb4:	8e b5       	in	r24, 0x2e	; 46
     fb6:	87 7f       	andi	r24, 0xF7	; 247
     fb8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     fba:	8f b5       	in	r24, 0x2f	; 47
     fbc:	8d 7f       	andi	r24, 0xFD	; 253
     fbe:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
     fc0:	8f b5       	in	r24, 0x2f	; 47
     fc2:	8e 7f       	andi	r24, 0xFE	; 254
     fc4:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg;
     fc6:	86 b5       	in	r24, 0x26	; 38
     fc8:	97 b5       	in	r25, 0x27	; 39
     fca:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     fce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     fd2:	71 c0       	rjmp	.+226    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_PWM_OCR1A_B_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     fd4:	8e b5       	in	r24, 0x2e	; 46
     fd6:	80 61       	ori	r24, 0x10	; 16
     fd8:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
     fda:	8e b5       	in	r24, 0x2e	; 46
     fdc:	87 7f       	andi	r24, 0xF7	; 247
     fde:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
     fe0:	8f b5       	in	r24, 0x2f	; 47
     fe2:	8d 7f       	andi	r24, 0xFD	; 253
     fe4:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
     fe6:	8f b5       	in	r24, 0x2f	; 47
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg;
     fec:	8a b5       	in	r24, 0x2a	; 42
     fee:	9b b5       	in	r25, 0x2b	; 43
     ff0:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
     ff4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
     ff8:	5e c0       	rjmp	.+188    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_PWM_ICR1_T_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
     ffa:	8e b5       	in	r24, 0x2e	; 46
     ffc:	80 61       	ori	r24, 0x10	; 16
     ffe:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
    1000:	8e b5       	in	r24, 0x2e	; 46
    1002:	87 7f       	andi	r24, 0xF7	; 247
    1004:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
    1006:	8f b5       	in	r24, 0x2f	; 47
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
    100c:	8f b5       	in	r24, 0x2f	; 47
    100e:	8e 7f       	andi	r24, 0xFE	; 254
    1010:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg ;
    1012:	86 b5       	in	r24, 0x26	; 38
    1014:	97 b5       	in	r25, 0x27	; 39
    1016:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
    101a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
    101e:	4b c0       	rjmp	.+150    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_PWM_OCR1A_T_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
    1020:	8e b5       	in	r24, 0x2e	; 46
    1022:	80 61       	ori	r24, 0x10	; 16
    1024:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_Low;
    1026:	8e b5       	in	r24, 0x2e	; 46
    1028:	87 7f       	andi	r24, 0xF7	; 247
    102a:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
    102c:	8f b5       	in	r24, 0x2f	; 47
    102e:	82 60       	ori	r24, 0x02	; 2
    1030:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
    1032:	8f b5       	in	r24, 0x2f	; 47
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg ;
    1038:	8a b5       	in	r24, 0x2a	; 42
    103a:	9b b5       	in	r25, 0x2b	; 43
    103c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
    1040:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
    1044:	38 c0       	rjmp	.+112    	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_CTC_ICR1_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
    1046:	8e b5       	in	r24, 0x2e	; 46
    1048:	80 61       	ori	r24, 0x10	; 16
    104a:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
    104c:	8e b5       	in	r24, 0x2e	; 46
    104e:	88 60       	ori	r24, 0x08	; 8
    1050:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_Low;
    1052:	8f b5       	in	r24, 0x2f	; 47
    1054:	8d 7f       	andi	r24, 0xFD	; 253
    1056:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
    1058:	8f b5       	in	r24, 0x2f	; 47
    105a:	8e 7f       	andi	r24, 0xFE	; 254
    105c:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg ;
    105e:	86 b5       	in	r24, 0x26	; 38
    1060:	97 b5       	in	r25, 0x27	; 39
    1062:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
    1066:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
    106a:	25 c0       	rjmp	.+74     	; 0x10b6 <Timer1_Mode_Select+0x24c>
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
		Timer1_Top = 0;
		break;*/
		
		case Timer1_WG_FastPWM_ICR1_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
    106c:	8e b5       	in	r24, 0x2e	; 46
    106e:	80 61       	ori	r24, 0x10	; 16
    1070:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
    1072:	8e b5       	in	r24, 0x2e	; 46
    1074:	88 60       	ori	r24, 0x08	; 8
    1076:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
    1078:	8f b5       	in	r24, 0x2f	; 47
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_Low;
    107e:	8f b5       	in	r24, 0x2f	; 47
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_ICR1_Reg ;
    1084:	86 b5       	in	r24, 0x26	; 38
    1086:	97 b5       	in	r25, 0x27	; 39
    1088:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
    108c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
    1090:	12 c0       	rjmp	.+36     	; 0x10b6 <Timer1_Mode_Select+0x24c>
		
		case Timer1_WG_FastPWM_OCR1A_Mode:
		Timer1_TCCR1B_Reg->WGM13_Bit=STD_High;
    1092:	8e b5       	in	r24, 0x2e	; 46
    1094:	80 61       	ori	r24, 0x10	; 16
    1096:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1B_Reg->WGM12_Bit=STD_High;
    1098:	8e b5       	in	r24, 0x2e	; 46
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	8e bd       	out	0x2e, r24	; 46
		Timer1_TCCR1A_Reg->WGM11_Bit=STD_High;
    109e:	8f b5       	in	r24, 0x2f	; 47
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	8f bd       	out	0x2f, r24	; 47
		Timer1_TCCR1A_Reg->WGM10_Bit=STD_High;
    10a4:	8f b5       	in	r24, 0x2f	; 47
    10a6:	81 60       	ori	r24, 0x01	; 1
    10a8:	8f bd       	out	0x2f, r24	; 47
		Timer1_Top = Timer1_OCR1A_Reg ;
    10aa:	8a b5       	in	r24, 0x2a	; 42
    10ac:	9b b5       	in	r25, 0x2b	; 43
    10ae:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <Timer1_Top+0x1>
    10b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <Timer1_Top>
		break;
	}
	
	switch (COM_Type)
    10b6:	66 23       	and	r22, r22
    10b8:	19 f0       	breq	.+6      	; 0x10c0 <Timer1_Mode_Select+0x256>
    10ba:	61 30       	cpi	r22, 0x01	; 1
    10bc:	51 f0       	breq	.+20     	; 0x10d2 <Timer1_Mode_Select+0x268>
    10be:	08 95       	ret
	{
		case Timer1_COM_A:
		Timer1_TCCR1A_Reg->COM1A_Bits = COM_Mode;
    10c0:	42 95       	swap	r20
    10c2:	44 0f       	add	r20, r20
    10c4:	44 0f       	add	r20, r20
    10c6:	40 7c       	andi	r20, 0xC0	; 192
    10c8:	8f b5       	in	r24, 0x2f	; 47
    10ca:	8f 73       	andi	r24, 0x3F	; 63
    10cc:	48 2b       	or	r20, r24
    10ce:	4f bd       	out	0x2f, r20	; 47
		break;
    10d0:	08 95       	ret
		
		case Timer1_COM_B:
		Timer1_TCCR1A_Reg->COM1B_Bits = COM_Mode;
    10d2:	43 70       	andi	r20, 0x03	; 3
    10d4:	42 95       	swap	r20
    10d6:	40 7f       	andi	r20, 0xF0	; 240
    10d8:	8f b5       	in	r24, 0x2f	; 47
    10da:	8f 7c       	andi	r24, 0xCF	; 207
    10dc:	48 2b       	or	r20, r24
    10de:	4f bd       	out	0x2f, r20	; 47
    10e0:	08 95       	ret

000010e2 <Timer1_Init>:
	}
	
}

void Timer1_Init(Timer1_Init_Type* Timer1_Init_Instance)
{
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ec 01       	movw	r28, r24
	Timer1_Mode_Select(Timer1_Init_Instance->WG_Mode, Timer1_Init_Instance->COM_Num , Timer1_Init_Instance->COM_Mode);
    10e8:	4a 81       	ldd	r20, Y+2	; 0x02
    10ea:	69 81       	ldd	r22, Y+1	; 0x01
    10ec:	88 81       	ld	r24, Y
    10ee:	0e 94 35 07 	call	0xe6a	; 0xe6a <Timer1_Mode_Select>
	Timer1_CS_Select(Timer1_Init_Instance->CS);
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	0e 94 02 07 	call	0xe04	; 0xe04 <Timer1_CS_Select>
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <Timer1_NonInv_FPWM_Duty>:

void Timer1_NonInv_FPWM_Duty(Timer1_COM_Type COM_Num , Float32 Duty)
{
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	cf 93       	push	r28
    1108:	c8 2f       	mov	r28, r24
    110a:	cb 01       	movw	r24, r22
    110c:	ba 01       	movw	r22, r20
   
   Uint16 OCR1A_Value = (Uint16) ( (((Float32)Duty/100.0)*(Timer1_Top+1))-1 ) ;
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	48 ec       	ldi	r20, 0xC8	; 200
    1114:	52 e4       	ldi	r21, 0x42	; 66
    1116:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3>
    111a:	6b 01       	movw	r12, r22
    111c:	7c 01       	movw	r14, r24
    111e:	60 91 c1 00 	lds	r22, 0x00C1	; 0x8000c1 <Timer1_Top>
    1122:	70 91 c2 00 	lds	r23, 0x00C2	; 0x8000c2 <Timer1_Top+0x1>
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__floatunsisf>
    1132:	a7 01       	movw	r20, r14
    1134:	96 01       	movw	r18, r12
    1136:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e8       	ldi	r20, 0x80	; 128
    1140:	5f e3       	ldi	r21, 0x3F	; 63
    1142:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
    1146:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
   switch (COM_Num)
    114a:	cc 23       	and	r28, r28
    114c:	19 f0       	breq	.+6      	; 0x1154 <Timer1_NonInv_FPWM_Duty+0x56>
    114e:	c1 30       	cpi	r28, 0x01	; 1
    1150:	21 f0       	breq	.+8      	; 0x115a <Timer1_NonInv_FPWM_Duty+0x5c>
    1152:	05 c0       	rjmp	.+10     	; 0x115e <Timer1_NonInv_FPWM_Duty+0x60>
   {
	   case Timer1_COM_A:
	   Timer1_OCR1A_Reg = OCR1A_Value ;
    1154:	7b bd       	out	0x2b, r23	; 43
    1156:	6a bd       	out	0x2a, r22	; 42
	   break;
    1158:	02 c0       	rjmp	.+4      	; 0x115e <Timer1_NonInv_FPWM_Duty+0x60>
	   
	   case Timer1_COM_B:
	   Timer1_OCR1B_Reg = OCR1A_Value ;
    115a:	79 bd       	out	0x29, r23	; 41
    115c:	68 bd       	out	0x28, r22	; 40
	   break;
   }

}
    115e:	cf 91       	pop	r28
    1160:	ff 90       	pop	r15
    1162:	ef 90       	pop	r14
    1164:	df 90       	pop	r13
    1166:	cf 90       	pop	r12
    1168:	08 95       	ret

0000116a <Timer2_CS_Select>:
#include "Timer2.h"

Uint8 Timer2_CS_Select(Timer2_CS_Type ClockSource)
{
	Uint16 Prescaler = 0;
	Timer2_TCCR2_Reg->CS2_Bits = ClockSource ;
    116a:	28 2f       	mov	r18, r24
    116c:	27 70       	andi	r18, 0x07	; 7
    116e:	95 b5       	in	r25, 0x25	; 37
    1170:	98 7f       	andi	r25, 0xF8	; 248
    1172:	92 2b       	or	r25, r18
    1174:	95 bd       	out	0x25, r25	; 37
	switch(ClockSource)
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	51 f0       	breq	.+20     	; 0x118e <Timer2_CS_Select+0x24>
    117a:	18 f4       	brcc	.+6      	; 0x1182 <Timer2_CS_Select+0x18>
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	69 f0       	breq	.+26     	; 0x119a <Timer2_CS_Select+0x30>
    1180:	04 c0       	rjmp	.+8      	; 0x118a <Timer2_CS_Select+0x20>
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	31 f0       	breq	.+12     	; 0x1192 <Timer2_CS_Select+0x28>
    1186:	85 30       	cpi	r24, 0x05	; 5
    1188:	31 f0       	breq	.+12     	; 0x1196 <Timer2_CS_Select+0x2c>

#include "Timer2.h"

Uint8 Timer2_CS_Select(Timer2_CS_Type ClockSource)
{
	Uint16 Prescaler = 0;
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	08 95       	ret
		break;
		case Timer2_CS_8Presc:
		Prescaler = 8;
		break;
		case Timer2_CS_64Presc:
		Prescaler = 64;
    118e:	80 e4       	ldi	r24, 0x40	; 64
		break;
    1190:	08 95       	ret
		case Timer2_CS_256Presc:
		Prescaler = 256;
    1192:	80 e0       	ldi	r24, 0x00	; 0
		break;
    1194:	08 95       	ret
		case Timer2_CS_1024Presc:
		Prescaler = 1024;
    1196:	80 e0       	ldi	r24, 0x00	; 0
		break;
    1198:	08 95       	ret
		case Timer2_CS_ExtCS_FallingEdge:
		case Timer2_CS_ExtCS_RisingEdge:
		Prescaler = 0;
		break;
		case Timer2_CS_8Presc:
		Prescaler = 8;
    119a:	88 e0       	ldi	r24, 0x08	; 8
		case Timer2_CS_1024Presc:
		Prescaler = 1024;
		break;
	}
	return Prescaler;
}
    119c:	08 95       	ret

0000119e <Timer2_Mode_Select>:

void Timer2_Mode_Select(Timer2_WG_Mode_Type WG_Mode , Timer2_COM_Mode_Type CMO_Mode)
{
	switch(WG_Mode)
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	69 f0       	breq	.+26     	; 0x11bc <Timer2_Mode_Select+0x1e>
    11a2:	28 f0       	brcs	.+10     	; 0x11ae <Timer2_Mode_Select+0x10>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	89 f0       	breq	.+34     	; 0x11ca <Timer2_Mode_Select+0x2c>
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	b1 f0       	breq	.+44     	; 0x11d8 <Timer2_Mode_Select+0x3a>
    11ac:	1b c0       	rjmp	.+54     	; 0x11e4 <Timer2_Mode_Select+0x46>
	{
		case Timer2_WG_Normal_Mode:
		Timer2_TCCR2_Reg->WGM21_Bit=STD_Low;
    11ae:	85 b5       	in	r24, 0x25	; 37
    11b0:	87 7f       	andi	r24, 0xF7	; 247
    11b2:	85 bd       	out	0x25, r24	; 37
		Timer2_TCCR2_Reg->WGM20_Bit=STD_Low;
    11b4:	85 b5       	in	r24, 0x25	; 37
    11b6:	8f 7b       	andi	r24, 0xBF	; 191
    11b8:	85 bd       	out	0x25, r24	; 37
		break;
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <Timer2_Mode_Select+0x46>
		
		case Timer2_WG_PWM_Mode:
		Timer2_TCCR2_Reg->WGM21_Bit=STD_Low;
    11bc:	85 b5       	in	r24, 0x25	; 37
    11be:	87 7f       	andi	r24, 0xF7	; 247
    11c0:	85 bd       	out	0x25, r24	; 37
		Timer2_TCCR2_Reg->WGM20_Bit=STD_High;
    11c2:	85 b5       	in	r24, 0x25	; 37
    11c4:	80 64       	ori	r24, 0x40	; 64
    11c6:	85 bd       	out	0x25, r24	; 37
		break;
    11c8:	0d c0       	rjmp	.+26     	; 0x11e4 <Timer2_Mode_Select+0x46>
		
		case Timer2_WG_CTC_Mode:
		Timer2_TCCR2_Reg->WGM21_Bit=STD_High;
    11ca:	85 b5       	in	r24, 0x25	; 37
    11cc:	88 60       	ori	r24, 0x08	; 8
    11ce:	85 bd       	out	0x25, r24	; 37
		Timer2_TCCR2_Reg->WGM20_Bit=STD_Low;
    11d0:	85 b5       	in	r24, 0x25	; 37
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	85 bd       	out	0x25, r24	; 37
		break;
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <Timer2_Mode_Select+0x46>
		
		case Timer2_WG_FastPWM_Mode:
		Timer2_TCCR2_Reg->WGM21_Bit=STD_High;
    11d8:	85 b5       	in	r24, 0x25	; 37
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	85 bd       	out	0x25, r24	; 37
		Timer2_TCCR2_Reg->WGM20_Bit=STD_High;
    11de:	85 b5       	in	r24, 0x25	; 37
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	85 bd       	out	0x25, r24	; 37
		break;
	}
	Timer2_TCCR2_Reg->COM2_Bits = CMO_Mode;
    11e4:	63 70       	andi	r22, 0x03	; 3
    11e6:	86 2f       	mov	r24, r22
    11e8:	82 95       	swap	r24
    11ea:	80 7f       	andi	r24, 0xF0	; 240
    11ec:	65 b5       	in	r22, 0x25	; 37
    11ee:	6f 7c       	andi	r22, 0xCF	; 207
    11f0:	68 2b       	or	r22, r24
    11f2:	65 bd       	out	0x25, r22	; 37
    11f4:	08 95       	ret

000011f6 <Timer2_Init>:
}

void  Timer2_Init(Timer2_Init_Type* Timer2_Init_Instance)
{
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
	Timer2_CS_Select(Timer2_Init_Instance->CS);
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	0e 94 b5 08 	call	0x116a	; 0x116a <Timer2_CS_Select>
	Timer2_Mode_Select(Timer2_Init_Instance->WG_Mode , Timer2_Init_Instance->COM_Mode);
    1202:	69 81       	ldd	r22, Y+1	; 0x01
    1204:	88 81       	ld	r24, Y
    1206:	0e 94 cf 08 	call	0x119e	; 0x119e <Timer2_Mode_Select>
}
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <Timer2_NonInv_FPWM_Duty>:

void Timer2_NonInv_FPWM_Duty(Float32 Duty)
{
	Uint16 OCR2_Value = (Uint8) ( (((Float32)Duty/100.0)*(Timer2_Top+1))-1 ) ;
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	48 ec       	ldi	r20, 0xC8	; 200
    1216:	52 e4       	ldi	r21, 0x42	; 66
    1218:	0e 94 8b 09 	call	0x1316	; 0x1316 <__divsf3>
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	53 e4       	ldi	r21, 0x43	; 67
    1224:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__mulsf3>
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	5f e3       	ldi	r21, 0x3F	; 63
    1230:	0e 94 1e 09 	call	0x123c	; 0x123c <__subsf3>
    1234:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__fixunssfsi>
	Timer2_OCR2_Reg = OCR2_Value ;
    1238:	63 bd       	out	0x23, r22	; 35
    123a:	08 95       	ret

0000123c <__subsf3>:
    123c:	50 58       	subi	r21, 0x80	; 128

0000123e <__addsf3>:
    123e:	bb 27       	eor	r27, r27
    1240:	aa 27       	eor	r26, r26
    1242:	0e 94 36 09 	call	0x126c	; 0x126c <__addsf3x>
    1246:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_round>
    124a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fp_pscA>
    124e:	38 f0       	brcs	.+14     	; 0x125e <__addsf3+0x20>
    1250:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_pscB>
    1254:	20 f0       	brcs	.+8      	; 0x125e <__addsf3+0x20>
    1256:	39 f4       	brne	.+14     	; 0x1266 <__addsf3+0x28>
    1258:	9f 3f       	cpi	r25, 0xFF	; 255
    125a:	19 f4       	brne	.+6      	; 0x1262 <__addsf3+0x24>
    125c:	26 f4       	brtc	.+8      	; 0x1266 <__addsf3+0x28>
    125e:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__fp_nan>
    1262:	0e f4       	brtc	.+2      	; 0x1266 <__addsf3+0x28>
    1264:	e0 95       	com	r30
    1266:	e7 fb       	bst	r30, 7
    1268:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>

0000126c <__addsf3x>:
    126c:	e9 2f       	mov	r30, r25
    126e:	0e 94 91 0a 	call	0x1522	; 0x1522 <__fp_split3>
    1272:	58 f3       	brcs	.-42     	; 0x124a <__addsf3+0xc>
    1274:	ba 17       	cp	r27, r26
    1276:	62 07       	cpc	r22, r18
    1278:	73 07       	cpc	r23, r19
    127a:	84 07       	cpc	r24, r20
    127c:	95 07       	cpc	r25, r21
    127e:	20 f0       	brcs	.+8      	; 0x1288 <__addsf3x+0x1c>
    1280:	79 f4       	brne	.+30     	; 0x12a0 <__addsf3x+0x34>
    1282:	a6 f5       	brtc	.+104    	; 0x12ec <__addsf3x+0x80>
    1284:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__fp_zero>
    1288:	0e f4       	brtc	.+2      	; 0x128c <__addsf3x+0x20>
    128a:	e0 95       	com	r30
    128c:	0b 2e       	mov	r0, r27
    128e:	ba 2f       	mov	r27, r26
    1290:	a0 2d       	mov	r26, r0
    1292:	0b 01       	movw	r0, r22
    1294:	b9 01       	movw	r22, r18
    1296:	90 01       	movw	r18, r0
    1298:	0c 01       	movw	r0, r24
    129a:	ca 01       	movw	r24, r20
    129c:	a0 01       	movw	r20, r0
    129e:	11 24       	eor	r1, r1
    12a0:	ff 27       	eor	r31, r31
    12a2:	59 1b       	sub	r21, r25
    12a4:	99 f0       	breq	.+38     	; 0x12cc <__addsf3x+0x60>
    12a6:	59 3f       	cpi	r21, 0xF9	; 249
    12a8:	50 f4       	brcc	.+20     	; 0x12be <__addsf3x+0x52>
    12aa:	50 3e       	cpi	r21, 0xE0	; 224
    12ac:	68 f1       	brcs	.+90     	; 0x1308 <__addsf3x+0x9c>
    12ae:	1a 16       	cp	r1, r26
    12b0:	f0 40       	sbci	r31, 0x00	; 0
    12b2:	a2 2f       	mov	r26, r18
    12b4:	23 2f       	mov	r18, r19
    12b6:	34 2f       	mov	r19, r20
    12b8:	44 27       	eor	r20, r20
    12ba:	58 5f       	subi	r21, 0xF8	; 248
    12bc:	f3 cf       	rjmp	.-26     	; 0x12a4 <__addsf3x+0x38>
    12be:	46 95       	lsr	r20
    12c0:	37 95       	ror	r19
    12c2:	27 95       	ror	r18
    12c4:	a7 95       	ror	r26
    12c6:	f0 40       	sbci	r31, 0x00	; 0
    12c8:	53 95       	inc	r21
    12ca:	c9 f7       	brne	.-14     	; 0x12be <__addsf3x+0x52>
    12cc:	7e f4       	brtc	.+30     	; 0x12ec <__addsf3x+0x80>
    12ce:	1f 16       	cp	r1, r31
    12d0:	ba 0b       	sbc	r27, r26
    12d2:	62 0b       	sbc	r22, r18
    12d4:	73 0b       	sbc	r23, r19
    12d6:	84 0b       	sbc	r24, r20
    12d8:	ba f0       	brmi	.+46     	; 0x1308 <__addsf3x+0x9c>
    12da:	91 50       	subi	r25, 0x01	; 1
    12dc:	a1 f0       	breq	.+40     	; 0x1306 <__addsf3x+0x9a>
    12de:	ff 0f       	add	r31, r31
    12e0:	bb 1f       	adc	r27, r27
    12e2:	66 1f       	adc	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	c2 f7       	brpl	.-16     	; 0x12da <__addsf3x+0x6e>
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <__addsf3x+0x9c>
    12ec:	ba 0f       	add	r27, r26
    12ee:	62 1f       	adc	r22, r18
    12f0:	73 1f       	adc	r23, r19
    12f2:	84 1f       	adc	r24, r20
    12f4:	48 f4       	brcc	.+18     	; 0x1308 <__addsf3x+0x9c>
    12f6:	87 95       	ror	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	b7 95       	ror	r27
    12fe:	f7 95       	ror	r31
    1300:	9e 3f       	cpi	r25, 0xFE	; 254
    1302:	08 f0       	brcs	.+2      	; 0x1306 <__addsf3x+0x9a>
    1304:	b0 cf       	rjmp	.-160    	; 0x1266 <__addsf3+0x28>
    1306:	93 95       	inc	r25
    1308:	88 0f       	add	r24, r24
    130a:	08 f0       	brcs	.+2      	; 0x130e <__addsf3x+0xa2>
    130c:	99 27       	eor	r25, r25
    130e:	ee 0f       	add	r30, r30
    1310:	97 95       	ror	r25
    1312:	87 95       	ror	r24
    1314:	08 95       	ret

00001316 <__divsf3>:
    1316:	0e 94 9f 09 	call	0x133e	; 0x133e <__divsf3x>
    131a:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_round>
    131e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_pscB>
    1322:	58 f0       	brcs	.+22     	; 0x133a <__divsf3+0x24>
    1324:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fp_pscA>
    1328:	40 f0       	brcs	.+16     	; 0x133a <__divsf3+0x24>
    132a:	29 f4       	brne	.+10     	; 0x1336 <__divsf3+0x20>
    132c:	5f 3f       	cpi	r21, 0xFF	; 255
    132e:	29 f0       	breq	.+10     	; 0x133a <__divsf3+0x24>
    1330:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    1334:	51 11       	cpse	r21, r1
    1336:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_szero>
    133a:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__fp_nan>

0000133e <__divsf3x>:
    133e:	0e 94 91 0a 	call	0x1522	; 0x1522 <__fp_split3>
    1342:	68 f3       	brcs	.-38     	; 0x131e <__divsf3+0x8>

00001344 <__divsf3_pse>:
    1344:	99 23       	and	r25, r25
    1346:	b1 f3       	breq	.-20     	; 0x1334 <__divsf3+0x1e>
    1348:	55 23       	and	r21, r21
    134a:	91 f3       	breq	.-28     	; 0x1330 <__divsf3+0x1a>
    134c:	95 1b       	sub	r25, r21
    134e:	55 0b       	sbc	r21, r21
    1350:	bb 27       	eor	r27, r27
    1352:	aa 27       	eor	r26, r26
    1354:	62 17       	cp	r22, r18
    1356:	73 07       	cpc	r23, r19
    1358:	84 07       	cpc	r24, r20
    135a:	38 f0       	brcs	.+14     	; 0x136a <__divsf3_pse+0x26>
    135c:	9f 5f       	subi	r25, 0xFF	; 255
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	22 0f       	add	r18, r18
    1362:	33 1f       	adc	r19, r19
    1364:	44 1f       	adc	r20, r20
    1366:	aa 1f       	adc	r26, r26
    1368:	a9 f3       	breq	.-22     	; 0x1354 <__divsf3_pse+0x10>
    136a:	35 d0       	rcall	.+106    	; 0x13d6 <__divsf3_pse+0x92>
    136c:	0e 2e       	mov	r0, r30
    136e:	3a f0       	brmi	.+14     	; 0x137e <__divsf3_pse+0x3a>
    1370:	e0 e8       	ldi	r30, 0x80	; 128
    1372:	32 d0       	rcall	.+100    	; 0x13d8 <__divsf3_pse+0x94>
    1374:	91 50       	subi	r25, 0x01	; 1
    1376:	50 40       	sbci	r21, 0x00	; 0
    1378:	e6 95       	lsr	r30
    137a:	00 1c       	adc	r0, r0
    137c:	ca f7       	brpl	.-14     	; 0x1370 <__divsf3_pse+0x2c>
    137e:	2b d0       	rcall	.+86     	; 0x13d6 <__divsf3_pse+0x92>
    1380:	fe 2f       	mov	r31, r30
    1382:	29 d0       	rcall	.+82     	; 0x13d6 <__divsf3_pse+0x92>
    1384:	66 0f       	add	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	88 1f       	adc	r24, r24
    138a:	bb 1f       	adc	r27, r27
    138c:	26 17       	cp	r18, r22
    138e:	37 07       	cpc	r19, r23
    1390:	48 07       	cpc	r20, r24
    1392:	ab 07       	cpc	r26, r27
    1394:	b0 e8       	ldi	r27, 0x80	; 128
    1396:	09 f0       	breq	.+2      	; 0x139a <__divsf3_pse+0x56>
    1398:	bb 0b       	sbc	r27, r27
    139a:	80 2d       	mov	r24, r0
    139c:	bf 01       	movw	r22, r30
    139e:	ff 27       	eor	r31, r31
    13a0:	93 58       	subi	r25, 0x83	; 131
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	3a f0       	brmi	.+14     	; 0x13b4 <__divsf3_pse+0x70>
    13a6:	9e 3f       	cpi	r25, 0xFE	; 254
    13a8:	51 05       	cpc	r21, r1
    13aa:	78 f0       	brcs	.+30     	; 0x13ca <__divsf3_pse+0x86>
    13ac:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    13b0:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_szero>
    13b4:	5f 3f       	cpi	r21, 0xFF	; 255
    13b6:	e4 f3       	brlt	.-8      	; 0x13b0 <__divsf3_pse+0x6c>
    13b8:	98 3e       	cpi	r25, 0xE8	; 232
    13ba:	d4 f3       	brlt	.-12     	; 0x13b0 <__divsf3_pse+0x6c>
    13bc:	86 95       	lsr	r24
    13be:	77 95       	ror	r23
    13c0:	67 95       	ror	r22
    13c2:	b7 95       	ror	r27
    13c4:	f7 95       	ror	r31
    13c6:	9f 5f       	subi	r25, 0xFF	; 255
    13c8:	c9 f7       	brne	.-14     	; 0x13bc <__divsf3_pse+0x78>
    13ca:	88 0f       	add	r24, r24
    13cc:	91 1d       	adc	r25, r1
    13ce:	96 95       	lsr	r25
    13d0:	87 95       	ror	r24
    13d2:	97 f9       	bld	r25, 7
    13d4:	08 95       	ret
    13d6:	e1 e0       	ldi	r30, 0x01	; 1
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	bb 1f       	adc	r27, r27
    13e0:	62 17       	cp	r22, r18
    13e2:	73 07       	cpc	r23, r19
    13e4:	84 07       	cpc	r24, r20
    13e6:	ba 07       	cpc	r27, r26
    13e8:	20 f0       	brcs	.+8      	; 0x13f2 <__divsf3_pse+0xae>
    13ea:	62 1b       	sub	r22, r18
    13ec:	73 0b       	sbc	r23, r19
    13ee:	84 0b       	sbc	r24, r20
    13f0:	ba 0b       	sbc	r27, r26
    13f2:	ee 1f       	adc	r30, r30
    13f4:	88 f7       	brcc	.-30     	; 0x13d8 <__divsf3_pse+0x94>
    13f6:	e0 95       	com	r30
    13f8:	08 95       	ret

000013fa <__fixunssfsi>:
    13fa:	0e 94 99 0a 	call	0x1532	; 0x1532 <__fp_splitA>
    13fe:	88 f0       	brcs	.+34     	; 0x1422 <__fixunssfsi+0x28>
    1400:	9f 57       	subi	r25, 0x7F	; 127
    1402:	98 f0       	brcs	.+38     	; 0x142a <__fixunssfsi+0x30>
    1404:	b9 2f       	mov	r27, r25
    1406:	99 27       	eor	r25, r25
    1408:	b7 51       	subi	r27, 0x17	; 23
    140a:	b0 f0       	brcs	.+44     	; 0x1438 <__fixunssfsi+0x3e>
    140c:	e1 f0       	breq	.+56     	; 0x1446 <__fixunssfsi+0x4c>
    140e:	66 0f       	add	r22, r22
    1410:	77 1f       	adc	r23, r23
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	1a f0       	brmi	.+6      	; 0x141e <__fixunssfsi+0x24>
    1418:	ba 95       	dec	r27
    141a:	c9 f7       	brne	.-14     	; 0x140e <__fixunssfsi+0x14>
    141c:	14 c0       	rjmp	.+40     	; 0x1446 <__fixunssfsi+0x4c>
    141e:	b1 30       	cpi	r27, 0x01	; 1
    1420:	91 f0       	breq	.+36     	; 0x1446 <__fixunssfsi+0x4c>
    1422:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fp_zero>
    1426:	b1 e0       	ldi	r27, 0x01	; 1
    1428:	08 95       	ret
    142a:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__fp_zero>
    142e:	67 2f       	mov	r22, r23
    1430:	78 2f       	mov	r23, r24
    1432:	88 27       	eor	r24, r24
    1434:	b8 5f       	subi	r27, 0xF8	; 248
    1436:	39 f0       	breq	.+14     	; 0x1446 <__fixunssfsi+0x4c>
    1438:	b9 3f       	cpi	r27, 0xF9	; 249
    143a:	cc f3       	brlt	.-14     	; 0x142e <__fixunssfsi+0x34>
    143c:	86 95       	lsr	r24
    143e:	77 95       	ror	r23
    1440:	67 95       	ror	r22
    1442:	b3 95       	inc	r27
    1444:	d9 f7       	brne	.-10     	; 0x143c <__fixunssfsi+0x42>
    1446:	3e f4       	brtc	.+14     	; 0x1456 <__fixunssfsi+0x5c>
    1448:	90 95       	com	r25
    144a:	80 95       	com	r24
    144c:	70 95       	com	r23
    144e:	61 95       	neg	r22
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	08 95       	ret

00001458 <__floatunsisf>:
    1458:	e8 94       	clt
    145a:	09 c0       	rjmp	.+18     	; 0x146e <__floatsisf+0x12>

0000145c <__floatsisf>:
    145c:	97 fb       	bst	r25, 7
    145e:	3e f4       	brtc	.+14     	; 0x146e <__floatsisf+0x12>
    1460:	90 95       	com	r25
    1462:	80 95       	com	r24
    1464:	70 95       	com	r23
    1466:	61 95       	neg	r22
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	8f 4f       	sbci	r24, 0xFF	; 255
    146c:	9f 4f       	sbci	r25, 0xFF	; 255
    146e:	99 23       	and	r25, r25
    1470:	a9 f0       	breq	.+42     	; 0x149c <__floatsisf+0x40>
    1472:	f9 2f       	mov	r31, r25
    1474:	96 e9       	ldi	r25, 0x96	; 150
    1476:	bb 27       	eor	r27, r27
    1478:	93 95       	inc	r25
    147a:	f6 95       	lsr	r31
    147c:	87 95       	ror	r24
    147e:	77 95       	ror	r23
    1480:	67 95       	ror	r22
    1482:	b7 95       	ror	r27
    1484:	f1 11       	cpse	r31, r1
    1486:	f8 cf       	rjmp	.-16     	; 0x1478 <__floatsisf+0x1c>
    1488:	fa f4       	brpl	.+62     	; 0x14c8 <__floatsisf+0x6c>
    148a:	bb 0f       	add	r27, r27
    148c:	11 f4       	brne	.+4      	; 0x1492 <__floatsisf+0x36>
    148e:	60 ff       	sbrs	r22, 0
    1490:	1b c0       	rjmp	.+54     	; 0x14c8 <__floatsisf+0x6c>
    1492:	6f 5f       	subi	r22, 0xFF	; 255
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	8f 4f       	sbci	r24, 0xFF	; 255
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	16 c0       	rjmp	.+44     	; 0x14c8 <__floatsisf+0x6c>
    149c:	88 23       	and	r24, r24
    149e:	11 f0       	breq	.+4      	; 0x14a4 <__floatsisf+0x48>
    14a0:	96 e9       	ldi	r25, 0x96	; 150
    14a2:	11 c0       	rjmp	.+34     	; 0x14c6 <__floatsisf+0x6a>
    14a4:	77 23       	and	r23, r23
    14a6:	21 f0       	breq	.+8      	; 0x14b0 <__floatsisf+0x54>
    14a8:	9e e8       	ldi	r25, 0x8E	; 142
    14aa:	87 2f       	mov	r24, r23
    14ac:	76 2f       	mov	r23, r22
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <__floatsisf+0x5e>
    14b0:	66 23       	and	r22, r22
    14b2:	71 f0       	breq	.+28     	; 0x14d0 <__floatsisf+0x74>
    14b4:	96 e8       	ldi	r25, 0x86	; 134
    14b6:	86 2f       	mov	r24, r22
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	2a f0       	brmi	.+10     	; 0x14c8 <__floatsisf+0x6c>
    14be:	9a 95       	dec	r25
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	da f7       	brpl	.-10     	; 0x14be <__floatsisf+0x62>
    14c8:	88 0f       	add	r24, r24
    14ca:	96 95       	lsr	r25
    14cc:	87 95       	ror	r24
    14ce:	97 f9       	bld	r25, 7
    14d0:	08 95       	ret

000014d2 <__fp_inf>:
    14d2:	97 f9       	bld	r25, 7
    14d4:	9f 67       	ori	r25, 0x7F	; 127
    14d6:	80 e8       	ldi	r24, 0x80	; 128
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	08 95       	ret

000014de <__fp_nan>:
    14de:	9f ef       	ldi	r25, 0xFF	; 255
    14e0:	80 ec       	ldi	r24, 0xC0	; 192
    14e2:	08 95       	ret

000014e4 <__fp_pscA>:
    14e4:	00 24       	eor	r0, r0
    14e6:	0a 94       	dec	r0
    14e8:	16 16       	cp	r1, r22
    14ea:	17 06       	cpc	r1, r23
    14ec:	18 06       	cpc	r1, r24
    14ee:	09 06       	cpc	r0, r25
    14f0:	08 95       	ret

000014f2 <__fp_pscB>:
    14f2:	00 24       	eor	r0, r0
    14f4:	0a 94       	dec	r0
    14f6:	12 16       	cp	r1, r18
    14f8:	13 06       	cpc	r1, r19
    14fa:	14 06       	cpc	r1, r20
    14fc:	05 06       	cpc	r0, r21
    14fe:	08 95       	ret

00001500 <__fp_round>:
    1500:	09 2e       	mov	r0, r25
    1502:	03 94       	inc	r0
    1504:	00 0c       	add	r0, r0
    1506:	11 f4       	brne	.+4      	; 0x150c <__fp_round+0xc>
    1508:	88 23       	and	r24, r24
    150a:	52 f0       	brmi	.+20     	; 0x1520 <__fp_round+0x20>
    150c:	bb 0f       	add	r27, r27
    150e:	40 f4       	brcc	.+16     	; 0x1520 <__fp_round+0x20>
    1510:	bf 2b       	or	r27, r31
    1512:	11 f4       	brne	.+4      	; 0x1518 <__fp_round+0x18>
    1514:	60 ff       	sbrs	r22, 0
    1516:	04 c0       	rjmp	.+8      	; 0x1520 <__fp_round+0x20>
    1518:	6f 5f       	subi	r22, 0xFF	; 255
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	08 95       	ret

00001522 <__fp_split3>:
    1522:	57 fd       	sbrc	r21, 7
    1524:	90 58       	subi	r25, 0x80	; 128
    1526:	44 0f       	add	r20, r20
    1528:	55 1f       	adc	r21, r21
    152a:	59 f0       	breq	.+22     	; 0x1542 <__fp_splitA+0x10>
    152c:	5f 3f       	cpi	r21, 0xFF	; 255
    152e:	71 f0       	breq	.+28     	; 0x154c <__fp_splitA+0x1a>
    1530:	47 95       	ror	r20

00001532 <__fp_splitA>:
    1532:	88 0f       	add	r24, r24
    1534:	97 fb       	bst	r25, 7
    1536:	99 1f       	adc	r25, r25
    1538:	61 f0       	breq	.+24     	; 0x1552 <__fp_splitA+0x20>
    153a:	9f 3f       	cpi	r25, 0xFF	; 255
    153c:	79 f0       	breq	.+30     	; 0x155c <__fp_splitA+0x2a>
    153e:	87 95       	ror	r24
    1540:	08 95       	ret
    1542:	12 16       	cp	r1, r18
    1544:	13 06       	cpc	r1, r19
    1546:	14 06       	cpc	r1, r20
    1548:	55 1f       	adc	r21, r21
    154a:	f2 cf       	rjmp	.-28     	; 0x1530 <__fp_split3+0xe>
    154c:	46 95       	lsr	r20
    154e:	f1 df       	rcall	.-30     	; 0x1532 <__fp_splitA>
    1550:	08 c0       	rjmp	.+16     	; 0x1562 <__fp_splitA+0x30>
    1552:	16 16       	cp	r1, r22
    1554:	17 06       	cpc	r1, r23
    1556:	18 06       	cpc	r1, r24
    1558:	99 1f       	adc	r25, r25
    155a:	f1 cf       	rjmp	.-30     	; 0x153e <__fp_splitA+0xc>
    155c:	86 95       	lsr	r24
    155e:	71 05       	cpc	r23, r1
    1560:	61 05       	cpc	r22, r1
    1562:	08 94       	sec
    1564:	08 95       	ret

00001566 <__fp_zero>:
    1566:	e8 94       	clt

00001568 <__fp_szero>:
    1568:	bb 27       	eor	r27, r27
    156a:	66 27       	eor	r22, r22
    156c:	77 27       	eor	r23, r23
    156e:	cb 01       	movw	r24, r22
    1570:	97 f9       	bld	r25, 7
    1572:	08 95       	ret

00001574 <__mulsf3>:
    1574:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3x>
    1578:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_round>
    157c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fp_pscA>
    1580:	38 f0       	brcs	.+14     	; 0x1590 <__mulsf3+0x1c>
    1582:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fp_pscB>
    1586:	20 f0       	brcs	.+8      	; 0x1590 <__mulsf3+0x1c>
    1588:	95 23       	and	r25, r21
    158a:	11 f0       	breq	.+4      	; 0x1590 <__mulsf3+0x1c>
    158c:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    1590:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__fp_nan>
    1594:	11 24       	eor	r1, r1
    1596:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_szero>

0000159a <__mulsf3x>:
    159a:	0e 94 91 0a 	call	0x1522	; 0x1522 <__fp_split3>
    159e:	70 f3       	brcs	.-36     	; 0x157c <__mulsf3+0x8>

000015a0 <__mulsf3_pse>:
    15a0:	95 9f       	mul	r25, r21
    15a2:	c1 f3       	breq	.-16     	; 0x1594 <__mulsf3+0x20>
    15a4:	95 0f       	add	r25, r21
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	55 1f       	adc	r21, r21
    15aa:	62 9f       	mul	r22, r18
    15ac:	f0 01       	movw	r30, r0
    15ae:	72 9f       	mul	r23, r18
    15b0:	bb 27       	eor	r27, r27
    15b2:	f0 0d       	add	r31, r0
    15b4:	b1 1d       	adc	r27, r1
    15b6:	63 9f       	mul	r22, r19
    15b8:	aa 27       	eor	r26, r26
    15ba:	f0 0d       	add	r31, r0
    15bc:	b1 1d       	adc	r27, r1
    15be:	aa 1f       	adc	r26, r26
    15c0:	64 9f       	mul	r22, r20
    15c2:	66 27       	eor	r22, r22
    15c4:	b0 0d       	add	r27, r0
    15c6:	a1 1d       	adc	r26, r1
    15c8:	66 1f       	adc	r22, r22
    15ca:	82 9f       	mul	r24, r18
    15cc:	22 27       	eor	r18, r18
    15ce:	b0 0d       	add	r27, r0
    15d0:	a1 1d       	adc	r26, r1
    15d2:	62 1f       	adc	r22, r18
    15d4:	73 9f       	mul	r23, r19
    15d6:	b0 0d       	add	r27, r0
    15d8:	a1 1d       	adc	r26, r1
    15da:	62 1f       	adc	r22, r18
    15dc:	83 9f       	mul	r24, r19
    15de:	a0 0d       	add	r26, r0
    15e0:	61 1d       	adc	r22, r1
    15e2:	22 1f       	adc	r18, r18
    15e4:	74 9f       	mul	r23, r20
    15e6:	33 27       	eor	r19, r19
    15e8:	a0 0d       	add	r26, r0
    15ea:	61 1d       	adc	r22, r1
    15ec:	23 1f       	adc	r18, r19
    15ee:	84 9f       	mul	r24, r20
    15f0:	60 0d       	add	r22, r0
    15f2:	21 1d       	adc	r18, r1
    15f4:	82 2f       	mov	r24, r18
    15f6:	76 2f       	mov	r23, r22
    15f8:	6a 2f       	mov	r22, r26
    15fa:	11 24       	eor	r1, r1
    15fc:	9f 57       	subi	r25, 0x7F	; 127
    15fe:	50 40       	sbci	r21, 0x00	; 0
    1600:	9a f0       	brmi	.+38     	; 0x1628 <__mulsf3_pse+0x88>
    1602:	f1 f0       	breq	.+60     	; 0x1640 <__mulsf3_pse+0xa0>
    1604:	88 23       	and	r24, r24
    1606:	4a f0       	brmi	.+18     	; 0x161a <__mulsf3_pse+0x7a>
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	bb 1f       	adc	r27, r27
    160e:	66 1f       	adc	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	88 1f       	adc	r24, r24
    1614:	91 50       	subi	r25, 0x01	; 1
    1616:	50 40       	sbci	r21, 0x00	; 0
    1618:	a9 f7       	brne	.-22     	; 0x1604 <__mulsf3_pse+0x64>
    161a:	9e 3f       	cpi	r25, 0xFE	; 254
    161c:	51 05       	cpc	r21, r1
    161e:	80 f0       	brcs	.+32     	; 0x1640 <__mulsf3_pse+0xa0>
    1620:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__fp_inf>
    1624:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__fp_szero>
    1628:	5f 3f       	cpi	r21, 0xFF	; 255
    162a:	e4 f3       	brlt	.-8      	; 0x1624 <__mulsf3_pse+0x84>
    162c:	98 3e       	cpi	r25, 0xE8	; 232
    162e:	d4 f3       	brlt	.-12     	; 0x1624 <__mulsf3_pse+0x84>
    1630:	86 95       	lsr	r24
    1632:	77 95       	ror	r23
    1634:	67 95       	ror	r22
    1636:	b7 95       	ror	r27
    1638:	f7 95       	ror	r31
    163a:	e7 95       	ror	r30
    163c:	9f 5f       	subi	r25, 0xFF	; 255
    163e:	c1 f7       	brne	.-16     	; 0x1630 <__mulsf3_pse+0x90>
    1640:	fe 2b       	or	r31, r30
    1642:	88 0f       	add	r24, r24
    1644:	91 1d       	adc	r25, r1
    1646:	96 95       	lsr	r25
    1648:	87 95       	ror	r24
    164a:	97 f9       	bld	r25, 7
    164c:	08 95       	ret

0000164e <__udivmodsi4>:
    164e:	a1 e2       	ldi	r26, 0x21	; 33
    1650:	1a 2e       	mov	r1, r26
    1652:	aa 1b       	sub	r26, r26
    1654:	bb 1b       	sub	r27, r27
    1656:	fd 01       	movw	r30, r26
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <__udivmodsi4_ep>

0000165a <__udivmodsi4_loop>:
    165a:	aa 1f       	adc	r26, r26
    165c:	bb 1f       	adc	r27, r27
    165e:	ee 1f       	adc	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	a2 17       	cp	r26, r18
    1664:	b3 07       	cpc	r27, r19
    1666:	e4 07       	cpc	r30, r20
    1668:	f5 07       	cpc	r31, r21
    166a:	20 f0       	brcs	.+8      	; 0x1674 <__udivmodsi4_ep>
    166c:	a2 1b       	sub	r26, r18
    166e:	b3 0b       	sbc	r27, r19
    1670:	e4 0b       	sbc	r30, r20
    1672:	f5 0b       	sbc	r31, r21

00001674 <__udivmodsi4_ep>:
    1674:	66 1f       	adc	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	1a 94       	dec	r1
    167e:	69 f7       	brne	.-38     	; 0x165a <__udivmodsi4_loop>
    1680:	60 95       	com	r22
    1682:	70 95       	com	r23
    1684:	80 95       	com	r24
    1686:	90 95       	com	r25
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	bd 01       	movw	r22, r26
    168e:	cf 01       	movw	r24, r30
    1690:	08 95       	ret

00001692 <__tablejump2__>:
    1692:	ee 0f       	add	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	05 90       	lpm	r0, Z+
    1698:	f4 91       	lpm	r31, Z
    169a:	e0 2d       	mov	r30, r0
    169c:	09 94       	ijmp

0000169e <__muluhisi3>:
    169e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__umulhisi3>
    16a2:	a5 9f       	mul	r26, r21
    16a4:	90 0d       	add	r25, r0
    16a6:	b4 9f       	mul	r27, r20
    16a8:	90 0d       	add	r25, r0
    16aa:	a4 9f       	mul	r26, r20
    16ac:	80 0d       	add	r24, r0
    16ae:	91 1d       	adc	r25, r1
    16b0:	11 24       	eor	r1, r1
    16b2:	08 95       	ret

000016b4 <__umulhisi3>:
    16b4:	a2 9f       	mul	r26, r18
    16b6:	b0 01       	movw	r22, r0
    16b8:	b3 9f       	mul	r27, r19
    16ba:	c0 01       	movw	r24, r0
    16bc:	a3 9f       	mul	r26, r19
    16be:	70 0d       	add	r23, r0
    16c0:	81 1d       	adc	r24, r1
    16c2:	11 24       	eor	r1, r1
    16c4:	91 1d       	adc	r25, r1
    16c6:	b2 9f       	mul	r27, r18
    16c8:	70 0d       	add	r23, r0
    16ca:	81 1d       	adc	r24, r1
    16cc:	11 24       	eor	r1, r1
    16ce:	91 1d       	adc	r25, r1
    16d0:	08 95       	ret

000016d2 <__itoa_ncheck>:
    16d2:	bb 27       	eor	r27, r27
    16d4:	4a 30       	cpi	r20, 0x0A	; 10
    16d6:	31 f4       	brne	.+12     	; 0x16e4 <__itoa_ncheck+0x12>
    16d8:	99 23       	and	r25, r25
    16da:	22 f4       	brpl	.+8      	; 0x16e4 <__itoa_ncheck+0x12>
    16dc:	bd e2       	ldi	r27, 0x2D	; 45
    16de:	90 95       	com	r25
    16e0:	81 95       	neg	r24
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__utoa_common>

000016e8 <__utoa_ncheck>:
    16e8:	bb 27       	eor	r27, r27

000016ea <__utoa_common>:
    16ea:	fb 01       	movw	r30, r22
    16ec:	55 27       	eor	r21, r21
    16ee:	aa 27       	eor	r26, r26
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	aa 1f       	adc	r26, r26
    16f6:	a4 17       	cp	r26, r20
    16f8:	10 f0       	brcs	.+4      	; 0x16fe <__utoa_common+0x14>
    16fa:	a4 1b       	sub	r26, r20
    16fc:	83 95       	inc	r24
    16fe:	50 51       	subi	r21, 0x10	; 16
    1700:	b9 f7       	brne	.-18     	; 0x16f0 <__utoa_common+0x6>
    1702:	a0 5d       	subi	r26, 0xD0	; 208
    1704:	aa 33       	cpi	r26, 0x3A	; 58
    1706:	08 f0       	brcs	.+2      	; 0x170a <__utoa_common+0x20>
    1708:	a9 5d       	subi	r26, 0xD9	; 217
    170a:	a1 93       	st	Z+, r26
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	79 f7       	brne	.-34     	; 0x16ee <__utoa_common+0x4>
    1710:	b1 11       	cpse	r27, r1
    1712:	b1 93       	st	Z+, r27
    1714:	11 92       	st	Z+, r1
    1716:	cb 01       	movw	r24, r22
    1718:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <strrev>

0000171c <strrev>:
    171c:	dc 01       	movw	r26, r24
    171e:	fc 01       	movw	r30, r24
    1720:	67 2f       	mov	r22, r23
    1722:	71 91       	ld	r23, Z+
    1724:	77 23       	and	r23, r23
    1726:	e1 f7       	brne	.-8      	; 0x1720 <strrev+0x4>
    1728:	32 97       	sbiw	r30, 0x02	; 2
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <strrev+0x18>
    172c:	7c 91       	ld	r23, X
    172e:	6d 93       	st	X+, r22
    1730:	70 83       	st	Z, r23
    1732:	62 91       	ld	r22, -Z
    1734:	ae 17       	cp	r26, r30
    1736:	bf 07       	cpc	r27, r31
    1738:	c8 f3       	brcs	.-14     	; 0x172c <strrev+0x10>
    173a:	08 95       	ret

0000173c <_exit>:
    173c:	f8 94       	cli

0000173e <__stop_program>:
    173e:	ff cf       	rjmp	.-2      	; 0x173e <__stop_program>
